{"componentChunkName":"component---src-templates-post-jsx","path":"/monitoring/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"3243d1e2-cbd1-5c85-94bb-6d089878a5cb","excerpt":"학습계기 모니터링 시스템을 구축하게 되었습니다. 이 중 Spring Boot 프로젝트와 쉽게 연동할 수 있고, 레퍼런스가 많고 무엇보다 인 Actuator-Prometheus-Grafana를 선택하게 되었습니다. 모니터링 과정 Pasted image 20240425111334\n(출처: https://wildeveloperetrain.tistory.com/…","html":"<h2>학습계기</h2>\n<p>모니터링 시스템을 구축하게 되었습니다.</p>\n<p>이 중 Spring Boot 프로젝트와 쉽게 연동할 수 있고, 레퍼런스가 많고 무엇보다 <code class=\"language-text\">무료</code>인 Actuator-Prometheus-Grafana를 선택하게 되었습니다.</p>\n<h2>모니터링 과정</h2>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/1b2879f0-b7ec-4865-8121-07dffea1cf3c\" alt=\"Pasted image 20240425111334\">\n(출처: <a href=\"https://wildeveloperetrain.tistory.com/309\">https://wildeveloperetrain.tistory.com/309</a>)</p>\n<ol>\n<li>SpringBoot의 Actuator가 실행중인 애플리케이션의 다양한 내부 정보들을 Micrometer라는 라이브러리를 통해 Prometheus가 쓸 수 있는 메트릭으로 수집하고 </li>\n<li>Prometheus가 이를 주기적으로 pull하여 쿼리할 수 있는 시계열 데이터(시간에 따라 저장된 데이터)로 가공하고 </li>\n<li>Grafana는 사용자가 쉽게 볼 수 있게 시각화하는 역할을 합니다.</li>\n</ol>\n<p><code class=\"language-text\">localhost:8080을 기준으로 진행되는 기록입니다.</code></p>\n<h2>Actuator</h2>\n<p>Actuator는 Spring Boot의 서브 프로젝트로 간단하게 빌드에 의존성을 추가하는 것만으로도 활성화 할 수 있습니다.</p>\n<p>앞서 말씀드린 Micrometer라이브러리도 메트릭 수집에 필요하니 의존성을 추가해주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">implementation 'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>actuator'  \nruntimeOnly 'io<span class=\"token punctuation\">.</span>micrometer<span class=\"token operator\">:</span>micrometer<span class=\"token operator\">-</span>registry<span class=\"token operator\">-</span>prometheus'</code></pre></div>\n<p>해당 의존성을 추가하고 빌드를 하고 <code class=\"language-text\">localhost:8080/actuator</code>로 접속하면 Actuator가 제공하는 기본 엔드포인트를 확인할 수 있습니다.</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/3751e1ee-f591-4db9-b977-9881447becad\" alt=\"Pasted image 20240425113607\"></p>\n<p><code class=\"language-text\">actuator/health</code>로 접속해보면</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/925eb0be-788b-42f7-b6b8-e49f00ff9293\" alt=\"Pasted image 20240425114118\"></p>\n<p>으로 현재 애플리케이션이 동작 중이라는 정보를 확인할 수 있습니다. </p>\n<h3>주의점</h3>\n<p>운영 서버에서 Actuator를 사용할 시 불필요한 엔드포인트를 활성화하면 중요 환경변수, 메모리 정보가 노출될 수 있고 Shutdown Endpoint는 애플리케이션을 중지시킬 수 있기 때문에 기본적으로 모든 엔드포인트를 disabled로 두고 필요한 엔드포인트만 화이트리스트로 운영하는 것이 추천됩니다.</p>\n<p>따라서 모든 엔드포인트를 disabled하고 prometheus에 대한 엔드포인트만 열도록 설정해주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">management<span class=\"token punctuation\">.</span>endpoints<span class=\"token punctuation\">.</span>enabled<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span><span class=\"token keyword\">default</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">//모든 엔드포인트 disabled</span>\nmanagement<span class=\"token punctuation\">.</span>endpoint<span class=\"token punctuation\">.</span>prometheus<span class=\"token punctuation\">.</span>enabled<span class=\"token operator\">=</span><span class=\"token boolean\">true</span> <span class=\"token comment\">//prometheus enable</span>\nmanagement<span class=\"token punctuation\">.</span>endpoints<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>exposure<span class=\"token punctuation\">.</span>include <span class=\"token operator\">=</span> prometheus <span class=\"token comment\">//노출할 endpoint 명시</span></code></pre></div>\n<p>스프링 시큐리티를 사용하신다면 <code class=\"language-text\">/actuator/prometheus</code>라는 엔드포인트가 노출되었으니 관리자 권한으로 해당 엔드포인트에 인가 처리를 하시면 좀 더 보안성이 올라갈 것이라고 생각됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/actuator/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADMIN\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 <code class=\"language-text\">/actuator/prometheus</code>로 접속을 하면</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/8420b5ba-bab2-4a1e-9b74-7da5a9c704a1\" alt=\"Pasted image 20240425120718\">\n이렇게 애플리케이션의 내부정보들이 메트릭으로 수집된 것을 확인할 수 있습니다.</p>\n<h2>Prometheus</h2>\n<p>이제 Prometheus가 위의 엔드포인트에 접속하여 메트릭을 pull할 수 있게 하면 됩니다.</p>\n<p><code class=\"language-text\">docker로 진행됩니다</code></p>\n<h3>docker로 Prometheus 설치</h3>\n<p>Prometheus를 docker로 설치할 때 Prometheus가 어느 엔드포인트에서 어느 주기로 메트릭을 수집(scrape)할지 미리 설정해주어야 합니다.</p>\n<p>docker로 Prometheus를 설치할 디렉토리를 만들고 해당 폴더에 <code class=\"language-text\">prometheus.yml</code>파일을 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">global</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">scrape_interval</span><span class=\"token punctuation\">:</span>     15s //15초 간격으로 수집\n\n<span class=\"token key atrule\">scrape_configs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'prometheus'</span>\n    <span class=\"token key atrule\">metrics_path</span><span class=\"token punctuation\">:</span> '/actuator/prometheus' //메트릭 수집 경로\n    <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'&lt;host>:&lt;port>'</span> <span class=\"token punctuation\">]</span> //메트릭 수집 호스트 정보</code></pre></div>\n<p>15초 간격으로 수집하고 <code class=\"language-text\">/actuator/prometheus</code>로 메트릭 수집경로를 명시하고 <code class=\"language-text\">targets</code>에 호스트와 포트 정보를 명시해줍니다.</p>\n<p>이제 해당 폴더에서 docker 컨테이너로 Prometheus를 띄우면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> prometheus <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9090</span>:9090 <span class=\"token parameter variable\">-v</span> <span class=\"token operator\">&lt;</span>prometheus.yml이 있는 경로<span class=\"token operator\">></span>:/etc/prometheus/prometheus.yml prom/prometheus</code></pre></div>\n<p>저는 해당 폴더에서 실행했기 때문에 경로 부분을 <code class=\"language-text\">$(pwd)</code>로 했지만 환경에 맞춰서 사용하시면 됩니다.</p>\n<p>이제 9090포트로 접속하면!</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/4f2603b2-57fb-42dd-8683-564a95abdcdc\" alt=\"Pasted image 20240425125109\">\nPrometheus가 실행되는 것을 확인할 수 있습니다.</p>\n<ul>\n<li>Status-> Targets에서 endpoint와의 연결이 <code class=\"language-text\">up</code>인 것을 확인 해주셔야 합니다.</li>\n<li>트러블 슈팅\n-> prometheus.yml 파일의 호스트를 localhost로 명시하면 Prometheus가 연결에 실패하여 <code class=\"language-text\">host.docker.internal</code>로 바꾸어 주었습니다. <a href=\"https://www.inflearn.com/questions/1030769/docker%EB%A1%9C-prometheus-grafana-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0-%EC%84%A4%EC%A0%95-%EA%B0%80%EC%9D%B4%EB%93%9C\">참고</a></li>\n</ul>\n<h2>Grafana</h2>\n<p>이제 Prometheus가 수집하고 가공한 데이터를 Grafana에서 시각화할 차례입니다.</p>\n<p>Grafana를 일단 docker에서 컨테이너로 실행해야겠죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> grafana <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:3000 grafana/grafana</code></pre></div>\n<p>Grafana 이미지를 80포트의 docker 컨테이너로 띄우는 명령입니다.</p>\n<p>Grafana</p>\n<p>80포트로 접속하면 Grafana의 로그인 화면이 보이는데요,\n기본 id는 admin, password도 admin으로 되어 있습니다.(password는 환경에 맞게 변경할 수 있습니다.)</p>\n<p>이제 Grafana에 접속하여 Prometheus 연결 설정을 해주어야 합니다.</p>\n<p>왼쪽 패널의 Connections에서 Data source를 클릭하고\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/3f41091e-e8a1-423f-a3d9-450afa3af239\" alt=\"Pasted image 20240425142203\"></p>\n<p>Add new Datasource를 클릭하고 type으로 Prometheus를 선택합니다.\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/e1d45327-e877-4c08-b7c3-d1e613b39b4e\" alt=\"Pasted image 20240425151724\"></p>\n<p>Connection 부분에 Promethus의 접속 url을 입력합니다.\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/2a1bb74d-7452-4dc1-b410-f5afc51234fd\" alt=\"Pasted image 20240425151746\"></p>\n<ul>\n<li>여기서도 docker로 사용할 시 <code class=\"language-text\">host.docker.internal</code>로 호스트를 명시해줘야 합니다.</li>\n</ul>\n<p>Save &#x26; Test를 클릭하여 접속이 되는지 확인합니다.\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/f36e8047-bf7b-4f6f-9012-e292de7f1d5d\" alt=\"Pasted image 20240425151803\"></p>\n<p>이제 연결한 데이터를 시각화할 DashBoard를 생성하면 됩니다.</p>\n<p>왼쪽 패널의 Dashboards를 선택하고 New를 클릭합니다\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/22f89528-723c-4e08-b617-15c5c62ec711\" alt=\"Pasted image 20240425151841\"></p>\n<p>이미 만들어진 Dashboard를 편리하게 사용하기 위해 Import Dashboard를 클릭하고\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/b9caa617-3c3c-496f-b611-57e082eb4430\" alt=\"Pasted image 20240425151925\"></p>\n<p>가장 다운로드 수가 많은 JVM Dashboard를 사용하기 위해 4701을 Load합니다\n-> 잘 만들어진 다른 Dashboard를 사용하고 싶다면 바로 위의 링크로 들어가셔서 Dashboard를 선택할 수 있습니다.</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/76ba4f80-f3d6-460b-aea1-e8249e48e676\" alt=\"Pasted image 20240425152009\"></p>\n<p>그리고 Dashboard에 연결할 Datasource를 설정하고, Import를 누르면!\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/5b71a463-3690-41e9-94f5-b899365f034d\" alt=\"Pasted image 20240425152043\"></p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/73edf3db-1da5-469e-b16f-d5d9974264f5\" alt=\"Pasted image 20240425143900\"></p>\n<p>이렇게 Prometheus가 가공한 데이터를 시각화하여 볼 수 있습니다.</p>\n<hr>\n<p>참고</p>\n<p><a href=\"https://techblog.woowahan.com/9232/\">https://techblog.woowahan.com/9232/</a></p>","frontmatter":{"title":"Actuator, Prometheus, Grafana로 서버 장애 대응하기","date":"April 24, 2024","update":"April 24, 2024","tags":["actuator","prometheus","grafana"],"series":"tickitecking"},"fields":{"slug":"/monitoring/","readingTime":{"minutes":7.43}}},"seriesList":{"edges":[{"node":{"id":"3d81f9cd-1c34-5429-b102-07e4e3c0e70f","fields":{"slug":"/docker_githubactions/"},"frontmatter":{"title":"Github Actions, Docker와 함께하는 배포 자동화"}}},{"node":{"id":"78a00267-c3db-5594-a5f3-621906fc030d","fields":{"slug":"/ticket_reservation_concurrency/"},"frontmatter":{"title":"'이미 선택된 좌석입니다' 티켓 예매시 중복예매생성 문제"}}},{"node":{"id":"ff98243f-757c-5a9c-a838-c8efb698054e","fields":{"slug":"/domain_refactoring/"},"frontmatter":{"title":"리팩토링을 통해 유연한 도메인을 만들자!"}}},{"node":{"id":"10982119-8b41-58d8-b2a9-83f45f276930","fields":{"slug":"/redis_deeper/"},"frontmatter":{"title":"Redis, 좀 더 자세히 알아볼까?"}}},{"node":{"id":"8ff84894-52cd-5648-be4d-4ae81514bfbb","fields":{"slug":"/api_performance_improvment/"},"frontmatter":{"title":"조회 API 성능 개선"}}},{"node":{"id":"c6508d6f-9443-5899-9f18-6f5ec12c7d72","fields":{"slug":"/db_replication/"},"frontmatter":{"title":"알아보고 적용하는 DB Replication"}}},{"node":{"id":"ca9fbb61-c38d-5470-9356-76fec2e7afd2","fields":{"slug":"/technology_free_code/"},"frontmatter":{"title":"기술변경에 확장성을 가진 리팩토링"}}},{"node":{"id":"3243d1e2-cbd1-5c85-94bb-6d089878a5cb","fields":{"slug":"/monitoring/"},"frontmatter":{"title":"Actuator, Prometheus, Grafana로 서버 장애 대응하기"}}}]},"previous":{"fields":{"slug":"/technology_free_code/"},"frontmatter":{"title":"기술변경에 확장성을 가진 리팩토링"}},"next":null},"pageContext":{"id":"3243d1e2-cbd1-5c85-94bb-6d089878a5cb","series":"tickitecking","previousPostId":"ca9fbb61-c38d-5470-9356-76fec2e7afd2","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}