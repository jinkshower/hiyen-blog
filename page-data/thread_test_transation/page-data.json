{"componentChunkName":"component---src-templates-post-jsx","path":"/thread_test_transation/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"e1cceb09-6833-5331-9222-47f6dfc45dc4","excerpt":"학습예제 코드 글에서 실습을 진행한 레포지토리입니다. 문제 상황 현재 진행하고 있는 프로젝트에서 예매시 동시에 사용자가 같은 좌석을 선택하는 상황을 테스트하기 위해 멀티스레드를 생성하는 테스트를 작성하게 되었습니다.  이 때 데이터 롤백을 위해 @Transactional을 사용했을 때 테스트 데이터가 삽입되지 않는 문제를 발견하게 되었습니다.  처음에는 …","html":"<h2>학습예제 코드</h2>\n<p>글에서 실습을 진행한 <a href=\"https://github.com/jinkshower/transaction\">레포지토리</a>입니다.</p>\n<h2>문제 상황</h2>\n<p>현재 진행하고 있는 프로젝트에서 예매시 동시에 사용자가 같은 좌석을 선택하는 상황을 테스트하기 위해 멀티스레드를 생성하는 테스트를 작성하게 되었습니다. </p>\n<p>이 때 데이터 롤백을 위해 @Transactional을 사용했을 때 테스트 데이터가 삽입되지 않는 문제를 발견하게 되었습니다. </p>\n<p>처음에는 문제 원인을 파악하기 위해 데이터베이스를 바꿔보며 삽질을 했는데요, 해당 문제를 해결한 기록을 공유하고자 합니다.</p>\n<h2>테스트 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"동시에 한자리 예매시 첫번째 요청만 예매성공한다.\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token annotation punctuation\">@Sql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/reservation-test-data.sql\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">concurrency_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">//given  </span>\n    <span class=\"token keyword\">int</span> tryCount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">long</span> userId <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">Long</span> concertId <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">ReservationRequestDto</span> reservationRequestDto <span class=\"token operator\">=</span> <span class=\"token class-name\">ReservationRequestDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">horizontal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">vertical</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token comment\">//when  </span>\n    <span class=\"token class-name\">CountDownLatch</span> latch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span>tryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tryCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">int</span> finalI <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>  \n        executor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n                reservationService<span class=\"token punctuation\">.</span><span class=\"token function\">createReservation</span><span class=\"token punctuation\">(</span>userId <span class=\"token operator\">+</span> finalI<span class=\"token punctuation\">,</span> concertId<span class=\"token punctuation\">,</span>  \n                    reservationRequestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n                latch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    latch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token comment\">//then  </span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>reservationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/7ff90430-8eb7-43d6-8b06-673766b7b56b\" alt=\"Pasted image 20240429173849\"></p>\n<p>해당 테스트는 @Sql을 이용해 빠른 데이터 삽입을 하고 있습니다. 이 때 ExecutorService를 사용해 멀티쓰레드 테스트를 하기만 하면 데이터 삽입이 되지 않았습니다.</p>\n<p>그런데 @Transactional 어노테이션만 지우면 테스트 데이터가 삽입되는 것을 발견했습니다.</p>\n<p>@Transactional과 멀티쓰레드를 같이 쓰면 어떤 현상이 생기길래 테스트 데이터가 삽입되지 않았을까요?</p>\n<h2>트랜잭션 전파</h2>\n<p>원인을 분석하기 전에 트랜잭션의 전파수준에 대해 잠시 짚고 가겠습니다.</p>\n<p>트랜잭션 전파속성(Transaction Propagation)이란 한 트랜잭션이 다른 트랜잭션에 어떻게 참여할지에 대한 설정입니다.</p>\n<p>Spring의 @Transactional은 아무 설정도 하지 않을 경우 기본적으로 Required입니다. 이 속성은 트랜잭션이 없다면 트랜잭션을 시작하고 이미 한 트랜잭션이 열려 있다면 열려있는 트랜잭션에 합류합니다.</p>\n<p>즉 2개의 논리적 트랜잭션(트랜잭션 매니저가 처리하는 트랜잭션)을 하나의 물리 트랜잭션(데이터 베이스 커넥션을 가져오고 커밋 or롤백 하는 단위)으로 만들 수 있습니다. </p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/5c5788d5-7abb-4135-a9e4-2e673e9690d1\" alt=\"Pasted image 20240518225538\"></p>\n<p>제가 테스트에서 사용하고 있는 @Sql의 <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/jdbc/SqlConfig.TransactionMode.html\">공식문서</a>를 확인해봤습니다.</p>\n<blockquote>\n<p>Using the resolved transaction manager and data source, SQL scripts will be executed within an existing transaction if present; otherwise, scripts will be executed in a new transaction that will be immediately committed. An existing transaction will typically be managed by the TransactionalTestExecutionListener).</p>\n</blockquote>\n<p>Transaction 모드를 명시하지 않을 시 Required와 같이 이미 생성된 트랜잭션에 합류한다는 것을 확인할 수 있습니다.</p>\n<h2>@Transactional과 멀티쓰레드</h2>\n<p>그렇다면 왜 하필 @Transactional과 멀티쓰레드를 사용하는 테스트에서 이런 일이 일어날까요?\n실험을 위해 간단한 예제 프로젝트를 생성해 봤습니다.</p>\n<p><code class=\"language-text\">Book</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>  \n<span class=\"token annotation punctuation\">@NoArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token class-name\">AccessLevel</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROTECTED</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Entity</span>  \n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"books\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Id</span>  \n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"price\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> price<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Builder</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">BookService</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>  \n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookService</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookRepository</span> bookRepository<span class=\"token punctuation\">;</span>  \n  \n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t    <span class=\"token keyword\">return</span> bookRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>  \n\t        <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">테스트 코드</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BookServiceTest</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BookService</span> bookService<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Test</span>  \n    <span class=\"token annotation punctuation\">@Transactional</span>    \n    <span class=\"token annotation punctuation\">@Sql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sql/test-data.sql\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">void</span> <span class=\"token function\">transaction_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">Long</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.getId() = \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.getTitle() = \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.getAuthor() = \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.getPrice() = \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">test-data.sql</code></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>books<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>title<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>author<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>price<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Great Gatsby'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F. Scott Fitzgerald'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9.99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n       <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Catcher in the Rye'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'J.D. Salinger'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/b47e5863-5f1f-4551-8ab2-d56528db2dc8\" alt=\"Pasted image 20240521170420\"></p>\n<p>결과는 당연스럽게도(?) 통과입니다.</p>\n<h2>멀티쓰레드 테스트</h2>\n<p>그럼 멀티쓰레드를 사용하는 테스트를 작성해볼까요? </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token annotation punctuation\">@Transactional</span>  \n<span class=\"token annotation punctuation\">@Sql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sql/test-data.sql\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">multi_thread_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">boolean</span> outerTransactionActive <span class=\"token operator\">=</span> <span class=\"token class-name\">TransactionSynchronizationManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">isActualTransactionActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outerTransactionActive = \"</span> <span class=\"token operator\">+</span> outerTransactionActive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">Long</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">Book</span> book <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.getId() = \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.getTitle() = \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.getAuthor() = \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book.getPrice() = \"</span> <span class=\"token operator\">+</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">CountDownLatch</span> latch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">boolean</span> innerTransactionActive <span class=\"token operator\">=</span> <span class=\"token class-name\">TransactionSynchronizationManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">isActualTransactionActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"innerTransactionActive = \"</span> <span class=\"token operator\">+</span> innerTransactionActive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token class-name\">Book</span> book1 <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book1.getId() = \"</span> <span class=\"token operator\">+</span> book1<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book1.getTitle() = \"</span> <span class=\"token operator\">+</span> book1<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book1.getAuthor() = \"</span> <span class=\"token operator\">+</span> book1<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"book1.getPrice() = \"</span> <span class=\"token operator\">+</span> book1<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            latch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성된 테스트 데이터를 bookSerivce의 get으로 멀티쓰레드에서 읽어낼 수 있는지 확인하고\n@Transactional로 제공한 트랜잭션 환경이 멀티쓰레드에도 적용되는지 확인하기 위해 <code class=\"language-text\">TransactionSynchronizationManager</code>를 사용했습니다.</p>\n<p>테스트를 돌려보면\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/9e69852f-5117-47dc-9c09-1cc0b76d2cbd\" alt=\"Pasted image 20240521172946\">\n멀티쓰레드가 생성되기 이전에 이미 book을 찾을 수 있지만</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/58600676-6cb1-404e-9002-1ee3ff05ae1a\" alt=\"Pasted image 20240521172216\"></p>\n<p>보시는 것처럼 멀티쓰레드 내에서는 <code class=\"language-text\">orElseThrow()</code> 에 의해 예외가 일어나는 것을 알 수 있습니다.</p>\n<p>또한 멀티쓰레드에는 Transaction이 적용되지 않는 것을 확인할 수 있습니다.\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/10430003-336e-4f2d-a6f7-d70aa25b3fc1\" alt=\"Pasted image 20240521173005\">\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/38b0edf3-b269-42d8-a097-e3c1edddaf8f\" alt=\"Pasted image 20240521173017\"></p>\n<p>따라서 테스트 코드에서 @Transactional로 트랜잭션 환경을 제공해도 테스트내에서 생성된 쓰레드들은 이에 영향을 받지 않고 독자적으로 트랜잭션을 생성한다는 것을 확인할 수 있습니다.</p>\n<p>이 사실을 @SqlConfig의 전파 기본속성과 같이 묶어서 생각해본다면</p>\n<ol>\n<li>@Transactional을 선언한 테스트를 실행하는 main쓰레드가 트랜잭션을 시작함</li>\n<li>@Sql는 이미 열려 있는 main쓰레드의 트랜잭션에 참여함. 즉 main쓰레드의 영속성 컨텍스트의 1차캐시와 쓰기 지연 저장소에 insert쿼리가 저장됨. </li>\n<li>테스트 내에서 ExecutorService로 생성된 쓰레드들은 main과 독자적인 쓰레드들이므로 main쓰레드의 영속성 컨텍스트를 공유하지 않음</li>\n<li>따라서 멀티쓰레드들은 테스트 데이터를 읽을 수 없음</li>\n</ol>\n<p>즉, @Sql의 기본 전파 속성을 간과하고 @Transactional을 적용했기 때문에 발생한 문제였습니다.\n@Sql이 main쓰레드의 트랜잭션에 참여하게 되어 원래라면 바로 commit되었을텐데 이게 테스트가 끝나는 시점으로 미루어졌기 때문에 다른 스레드들이 데이터를 읽을 수 없게 된 것이었습니다. </p>\n<p>이렇게 문제를 분석하고, 이를 해결할 수 있는 방법을 찾아보았습니다.</p>\n<h2>해결방법 1. @Transactional을 테스트에서 사용하지 않는다</h2>\n<p>간단하게 @Transactioanl을 사용하지 않으면 @Sql은 제가 원래 생각했던 대로 작동할 것입니다. </p>\n<p>@Transactional을 테스트에 사용하는 이유는 테스트가 끝날 때마다 자동으로 데이터를 롤백해주기 때문인데, 이러한 처리를 수동으로 한다면 다른 테스트에 영향을 미치지 않을 것입니다.</p>\n<p>(참고로, 테스트에 @Transactional을 사용하는 것에 대해 의견이 다른 경우가 있는데 자세한 내용은 향로님의 <a href=\"https://jojoldu.tistory.com/761\">블로그</a>에 적혀있습니다.)</p>\n<p>따라서 모든 테이블을 truncate하는 쿼리를 실행한다면 테스트 데이터가 다른 테스트에 영향을 주지 않을 것입니다. 해당 부분을 적용하는 방법은 저의 이전 <a href=\"https://jinkshower.github.io/sprintboottest_isolation/\">테스트 격리</a>글에서 코드와 함께 설명했습니다.</p>\n<h2>해결방법 2. @Sql의 트랜잭션 전파 수준을 변경한다</h2>\n<p>@Sql의 공식문서는 @SqlConfig에서 TransactionMode를 명시함으로써 해당 sql 스크립트의 전파수준을 바꿀 수 있다고 말합니다. </p>\n<p>이 TransactionMode를 ISOLATED로 설정하면 즉시 커밋되는 새롭고 고립된 트랜잭션 내에서 실행될 수 있다고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Sql</span><span class=\"token punctuation\">(</span>scripts <span class=\"token operator\">=</span> <span class=\"token string\">\"/sql/test-data.sql\"</span><span class=\"token punctuation\">,</span>   \n    config <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@SqlConfig</span><span class=\"token punctuation\">(</span>transactionMode <span class=\"token operator\">=</span> <span class=\"token class-name\">TransactionMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ISOLATED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이를 적용하고 테스트를 돌려보면</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/cbb9cc9e-0a8d-45db-a82f-edd8e1bc1d60\" alt=\"Pasted image 20240521195056\"></p>\n<p>생성된 쓰레드들에서도 db의 테스트 데이터를 읽음을 확인할 수 있습니다. </p>","frontmatter":{"title":"스레드테스트와 트랜잭션 전파","date":"May 20, 2024","update":"May 20, 2024","tags":["threadtest","transation"],"series":"hiyen"},"fields":{"slug":"/thread_test_transation/","readingTime":{"minutes":10.55}}},"seriesList":{"edges":[{"node":{"id":"7e50230d-e72f-5a04-acf7-7fe60fd8536e","fields":{"slug":"/sprintboottest_isolation/"},"frontmatter":{"title":"@SpringBootTest와 테스트격리"}}},{"node":{"id":"e4729e9e-f445-5bf8-9d94-22806aeed103","fields":{"slug":"/pagination_fetchjoin/"},"frontmatter":{"title":"Spring Data JPA의 페이징처리와 fetch join시의 문제점"}}},{"node":{"id":"78a00267-c3db-5594-a5f3-621906fc030d","fields":{"slug":"/ticket_reservation_concurrency/"},"frontmatter":{"title":"'이미 선택된 좌석입니다' 티켓 예매시 중복예매생성 문제"}}},{"node":{"id":"ff98243f-757c-5a9c-a838-c8efb698054e","fields":{"slug":"/domain_refactoring/"},"frontmatter":{"title":"리팩토링을 통해 유연한 도메인을 만들자!"}}},{"node":{"id":"8ff84894-52cd-5648-be4d-4ae81514bfbb","fields":{"slug":"/api_performance_improvment/"},"frontmatter":{"title":"조회 API 성능 개선"}}},{"node":{"id":"ca9fbb61-c38d-5470-9356-76fec2e7afd2","fields":{"slug":"/technology_free_code/"},"frontmatter":{"title":"기술변경에 확장성을 가진 리팩토링"}}},{"node":{"id":"e1cceb09-6833-5331-9222-47f6dfc45dc4","fields":{"slug":"/thread_test_transation/"},"frontmatter":{"title":"스레드테스트와 트랜잭션 전파"}}},{"node":{"id":"68b7f04a-a5cc-509a-a7a5-6fe7a2883037","fields":{"slug":"/java_bytecode/"},"frontmatter":{"title":"바이트코드와 함께 알아 보는 자바 실행과정"}}},{"node":{"id":"91584fd5-bec1-56d5-b867-97896aca40b6","fields":{"slug":"/distributed_information/"},"frontmatter":{"title":"분산시스템에서 데이터를 전달하는 방법"}}},{"node":{"id":"a7cd67d4-5503-5ae9-8281-75d74bd84bbe","fields":{"slug":"/galmanhae_first/"},"frontmatter":{"title":"외부 API 호출과 데이터 처리"}}},{"node":{"id":"e5dea1c1-c406-50f3-a2e0-a3fdfd73a11a","fields":{"slug":"/bottleneck_chasing/"},"frontmatter":{"title":"서버 병목현상 추적기"}}}]},"previous":{"fields":{"slug":"/monitoring/"},"frontmatter":{"title":"Actuator, Prometheus, Grafana로 모니터링 환경을 구축해보자"}},"next":{"fields":{"slug":"/java_bytecode/"},"frontmatter":{"title":"바이트코드와 함께 알아 보는 자바 실행과정"}}},"pageContext":{"id":"e1cceb09-6833-5331-9222-47f6dfc45dc4","series":"hiyen","previousPostId":"3243d1e2-cbd1-5c85-94bb-6d089878a5cb","nextPostId":"68b7f04a-a5cc-509a-a7a5-6fe7a2883037"}},"staticQueryHashes":[],"slicesMap":{}}