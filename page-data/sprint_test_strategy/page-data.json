{"componentChunkName":"component---src-templates-post-jsx","path":"/sprint_test_strategy/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"b9369ae2-1ede-5efd-8c55-c7c779416eb3","excerpt":"인수테스트 에서 이어지는 글입니다. Slice Test Slice Test는 레이어별로 잘라서 레이어를 하나의 단위로 보는 테스트이다. 왜 Slice Test를 해야 하는가? 개별 레이어의 검증\nSlice Test를 통해 각 레이어를 독립적으로 테스트할 수 있다. \n즉, 테스트가 깨진다면 어디를 고쳐야할 지에 대해 빠른 피드백을 받을 수 있다. 레이어간 …","html":"<p><a href=\"https://jinkshower.github.io/acceptance_test/\">인수테스트</a> 에서 이어지는 글입니다.</p>\n<h2>Slice Test</h2>\n<p>Slice Test는 레이어별로 잘라서 레이어를 하나의 단위로 보는 테스트이다.</p>\n<h3>왜 Slice Test를 해야 하는가?</h3>\n<ol>\n<li>개별 레이어의 검증\nSlice Test를 통해 각 레이어를 독립적으로 테스트할 수 있다.\n즉, 테스트가 깨진다면 어디를 고쳐야할 지에 대해 빠른 피드백을 받을 수 있다.</li>\n<li>레이어간 의존성을 낮추는 리팩토링을 유도한다\n<code class=\"language-text\">단위 테스트</code>를 하다 보면 테스트하기 어려운 메인코드들이 존재한다.\n나의 경우는 다른 객체에 과도하게 의존하고 있는 메인코드들에서 테스트를 하기 어렵다는 느낌을 받은 경험이 많은데, 이를 spring의 레이어들에도 적용할 수 있다.</li>\n<li>@SpringBootTest는 무겁다\n인수테스트 글에서도 언급했지만 @SpringBootTest는 모든 Bean을 로드하기 때문에 속도가 느리다. </li>\n</ol>\n<p>이러한 이유에서 Slice Test를 개인 과제에서 적용한 기록을 적어보고자 한다.</p>\n<h2>@WebMvcTest</h2>\n<p>@WebMvcTest는 웹 레이어 테스트를 하는데 필요한 빈들만 로드한다.\n즉, @Service @Repository @Component를 스캔하지 않기 때문에 수동으로 등록해주거나 Mock객체를 만들어서 주입시켜줘야 한다.</p>\n<p>작성한 코드 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebMvcTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TodoController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@MockBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JpaMetamodelMappingContext</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ControllerTest</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">ObjectMapper</span> objectMapper<span class=\"token punctuation\">;</span>  \n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@WebMvcTest(TodoController.class)</code>\n해당 컨트롤러에 관련된 빈만 로드하게 설정해줬다.</p>\n<p><code class=\"language-text\">@MockBean(JpaMetamodelMappingContext.class)</code>\nTodo 엔티티가 JpaAuditing을 사용하고 있기 때문에  충돌을 방지하기 위하여 로 Mock으로 대체해주었다.</p>\n<p><code class=\"language-text\">@Import(ExternalConfig.class)</code>\n수동으로 등록한 @Component는 앞서 말했듯이 @WebMvcTest에서 컴포넌트 스캔을 하지 않기 때문에  테스트용 클래스에 빈 정보를 등록하고 해당 테스트에서 사용하게 설정해줬다.</p>\n<p>해당 클래스를 상속받아 작성한 테스트 중 일부</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"할일 생성 요청\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">//given  </span>\n    <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_USER_ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token comment\">//when  </span>\n    <span class=\"token class-name\">ResultActions</span> action <span class=\"token operator\">=</span> mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todos\"</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token constant\">AUTHORIZATION_HEADER</span><span class=\"token punctuation\">,</span> <span class=\"token function\">token</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span>objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_TODO_REQUEST_DTO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token comment\">//then  </span>\n    action<span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCreated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>todoService<span class=\"token punctuation\">,</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">saveTodo</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TodoRequestDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>BDD mockito를 사용하여 좀 더 가독성을 높이려고 했고, 컨트롤러 레이어만 테스트하기 때문에 service나 repository는 @MockBean으로 선언하여 사용하였다. </p>\n<h2>Service Test</h2>\n<p>작성한 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoServiceTest</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TodoFixture</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@InjectMocks</span>  \n    <span class=\"token class-name\">TodoServiceImpl</span> todoService<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Mock</span>  \n    <span class=\"token class-name\">TodoRepository</span> todoRepository<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"할일 생성\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token annotation punctuation\">@Test</span>  \n    <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">//given  </span>\n        <span class=\"token class-name\">Todo</span> testTodo <span class=\"token operator\">=</span> <span class=\"token constant\">TEST_TODO</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span>testTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token comment\">//when  </span>\n        <span class=\"token class-name\">TodoResponseDto</span> actual <span class=\"token operator\">=</span>  \n            todoService<span class=\"token punctuation\">.</span><span class=\"token function\">saveTodo</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_USER_DTO</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TEST_TODO_REQUEST_DTO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token comment\">//then  </span>\n        <span class=\"token class-name\">TodoResponseDto</span> expected <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodoResponseDto</span><span class=\"token punctuation\">(</span>testTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>서비스레이어의 비즈니스 로직이 잘 작동하는지가 관건이므로 나머지는 Mock으로 처리해줬다.</p>\n<p><code class=\"language-text\">@InjectMocks</code>\nMock객체들을 해당 객체에 주입하도록 설정해준다.</p>\n<p><code class=\"language-text\">@Mock</code>\n데이터베이스에 저장되었는지는 관심사가 아니므로 가짜 객체를 설정해주었다.</p>\n<h2>@DataJpaTest</h2>\n<p>Jpa 관련 컴포넌트를 테스트하는 데 사용되는 어노테이션이다.\n전체 ApplicationContext를 로드하지 않고 DataJpaRepository와 관련된 빈들만을 로드한다.</p>\n<p>작성한 테스트</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DataJpaTest</span>  \n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoRepositoryTest</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TodoFixture</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token class-name\">TodoRepository</span> todoRepository<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@BeforeEach</span>  \n    <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"작성일 내림차순 정렬 조회\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token annotation punctuation\">@Test</span>  \n    <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">//given  </span>\n        <span class=\"token class-name\">Todo</span> testTodo1 <span class=\"token operator\">=</span>  \n            <span class=\"token class-name\">TodoHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_TODO</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">minusMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TEST_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">Todo</span> testTodo2 <span class=\"token operator\">=</span>  \n            <span class=\"token class-name\">TodoHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_TODO</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">minusMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TEST_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">Todo</span> testTodo3 <span class=\"token operator\">=</span>  \n            <span class=\"token class-name\">TodoHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_TODO</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TEST_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>testTodo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>testTodo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>testTodo3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token comment\">//when  </span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> actual <span class=\"token operator\">=</span> todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByOrderByCreatedAtDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token comment\">//then  </span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">></span></span> times <span class=\"token operator\">=</span> actual<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Timestamped</span><span class=\"token operator\">::</span><span class=\"token function\">getCreatedAt</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>DataJpa의 기본 CRUD 기능은 라이브러리의 기능으로 간주하고 테스트를 작성하지 않았다.\n커스텀하게 작성한 쿼리메서드를 테스트하는 메서드를 작성해보았다.</p>\n<p>@DataJpaTest는 기본적으로 h2 데이터베이스를 사용하게 되어있는데,\n실제 데이터베이스를 사용하려면  <code class=\"language-text\">@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)</code> 을 추가하면 된다. </p>\n<p><em>틀린 부분이나 부족한 부분에 대한 피드백은 언제나 환영합니다</em></p>","frontmatter":{"title":"Slice Test","date":"February 25, 2024","update":"February 25, 2024","tags":["spring","slicetest","testing"],"series":"testing"},"fields":{"slug":"/sprint_test_strategy/","readingTime":{"minutes":5.15}}},"seriesList":{"edges":[{"node":{"id":"b9369ae2-1ede-5efd-8c55-c7c779416eb3","fields":{"slug":"/sprint_test_strategy/"},"frontmatter":{"title":"Slice Test"}}}]},"previous":{"fields":{"slug":"/transaction/"},"frontmatter":{"title":"Transaction"}},"next":null},"pageContext":{"id":"b9369ae2-1ede-5efd-8c55-c7c779416eb3","series":"testing","previousPostId":"2887bce2-cf4e-59e5-bfba-4e651d9c2ecf","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}