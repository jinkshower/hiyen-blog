{"componentChunkName":"component---src-templates-post-jsx","path":"/jdbc_template/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"598faadf-ec7e-5e5f-877e-46e55774c613","excerpt":"JDBC Template는 어떻게 생겨났을까? JDBC코드를 개선하며 살펴보는 기록 JDBC template가 있기 전 간단하게 users 테이블에 User를 저장하고 삭제하는 \bUserDao 메서드들을 JDBC로 작성해봤다\nDataSource는 클래스를 주입받아 사용하고 있다. 자원을 쓰는 부분을 모두 null 체크를 하고 반환해줘야 하기 때문에 try…","html":"<p>JDBC Template는 어떻게 생겨났을까? JDBC코드를 개선하며 살펴보는 기록</p>\n<h2>JDBC template가 있기 전</h2>\n<p>간단하게 users 테이블에 User를 저장하고 삭제하는 \bUserDao 메서드들을 JDBC로 작성해봤다\nDataSource는 <code class=\"language-text\">SimpleDriverDataSource</code>클래스를 주입받아 사용하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Connection</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n        c <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into users(id, name, password) value(?,?,?)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>  \n                ps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n                c<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Connection</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n        c <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>  \n                ps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n                c<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자원을 쓰는 부분을 모두 null 체크를 하고 반환해줘야 하기 때문에 try-catch-finally 중 제외할 부분은 없다.</p>\n<p>일단 catch하는 부분은 비워놨는데 여기서 예외처리를 추가하면 코드는 더 길어질 것이다. </p>\n<p>위 코드는 아무런 문제가 없지만 간단한 기능들을 쓰는데 이만한 코드를 작성하는 게 맞나?라는 생각이 들 수 밖에 없다. </p>\n<p>더 문제인 점은 db에 접근하는다른 기능을 만드려면 위 코드와 아주 유사한 메소드를  똑같이 생성해줘야 한다는 점이다.</p>\n<h2>전략패턴 활용</h2>\n<p>전략패턴을 활용하여  반복되는 부분을 줄여볼 수 있을 것 같다.</p>\n<p>우리가 관심 있는 부분은 쿼리문이 바뀌는 ps 부분이니 이 부분을 interface화 하고,우리가 원하는 기능을 implement하는 클래스로 만들고, 반복되는 부분에는 전략의 구현클래스를 주입 받도록 할 수 있을 것이다. </p>\n<p>interface 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StatementStrategy</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">PreparedStatement</span> <span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>add와 delete 클래스</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddStatement</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StatementStrategy</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//add 는 user가 필요하니 주입 받는다</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AddStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PreparedStatement</span> <span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into users(id, name, password) value(?,?,?)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeleteStatement</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StatementStrategy</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PreparedStatement</span> <span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>전략패턴을 활용하여 구현체를 주입받기</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">jdbcWithStatementStrategy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatementStrategy</span> statement<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Connection</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n        c <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        ps <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//구현체마다 다른 ps를 받을 수 있다</span>\n  \n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> ps<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            c<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n  </code></pre></div>\n<p>전략패턴을 사용하는 add, delete 메서드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">StatementStrategy</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AddStatement</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">jdbcWithStatementStrategy</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">StatementStrategy</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">jdbcWithStatementStrategy</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>구체화된 전략클래스들을 주입받아 실행하는 추상화된 메서드를 만들었다. close()또한 메서드 추출을 진행했다.</p>\n<p>이제 우리는 필요한 기능이 생길때 interface를 상속받은 클래스를 만들고 해당 메서드를 이용만 하면 된다.</p>\n<p>처음 코드와 비교해보면 add, delete의 코드 라인 수가 훨씬 많이 줄었다.</p>\n<p>그리고 다른 기능이 추가 구현되어도 전략 클래스를 새로 만들고 추상화된 메서드에 파라미터로 넣는 간단한 기능만 만들면 되니 확장성을 갖췄다고도 볼 수 있다.</p>\n<p>하지만 전통적인 전략패턴의 문제점을 여전히 가지고 있는데, 바로 구현클래스가 계속 늘어나는 단점이다. 또한 add(), delete()가 직접 전략의 구현체를 생성하는 것도 확장성에 문제를 일으킬 수 있다.</p>\n<h2>템플릿/ 콜백 패턴</h2>\n<p><code class=\"language-text\">템플릿/콜백 패턴</code> 이란</p>\n<p>중복되는 부분이 있는 코드에서 변경이 일어나지 않는 부분을 <code class=\"language-text\">템플릿</code>, 변경이 일어나는 부분을 <code class=\"language-text\">콜백</code>으로 분리하여 변화되는 부분만 인자로 넘겨주는 디자인 패턴이다</p>\n<p>전략패턴으로 개선한 위의 UserDao를 템플릿/콜백으로 더 개선해볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCContext</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JDBCContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token comment\">//주목! </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">executeSql</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> query<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">jdbcWithStatementStrategy</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                    ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n                <span class=\"token keyword\">return</span> ps<span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n  \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">jdbcWithStatementStrategy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StatementStrategy</span> stmt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">Connection</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            c <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            ps <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">makePreparedStatement</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> ps<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Connection</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ps <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n                ps<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n                c<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전 jdbcWithStatementStrategy를 가진 새로운 <code class=\"language-text\">JDBCContext</code>클래스를 만들어냈다.\n즉, 반복되는 부분을 <code class=\"language-text\">템플릿</code>으로 만들어 낸 것이다.</p>\n<p>그리고 public 메서드인 executeSql()를 추가했는데 이에 주목해보자</p>\n<p>앞선 전략패턴의 문제점이었던 구현클래스가 계속 늘어나는 문제를 람다를 사용한 익명내부 클래스 생성로 해결했다. </p>\n<p>또한 varargs를 사용하여 add()처럼 필요한 인자수가 늘어나는 문제를 해결했다. </p>\n<p>그렇다면 UserDao는 어떻게 변했을까? </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">JDBCContext</span> jdbcContext<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 주입 받는다. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    jdbcContext<span class=\"token punctuation\">.</span><span class=\"token function\">executeSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into users(id, name, password) value(?,?,?)\"</span><span class=\"token punctuation\">,</span>  \n            user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    jdbcContext<span class=\"token punctuation\">.</span><span class=\"token function\">executeSql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 UserDao는 DB에 어떻게 연결되고, 예외를 처리하고, 자원을 반환하는지 상관하지 않아도 된다.\n우리가 관심있는 query문만 DB에 Access하는 DAO의 실목적에 맞는 객체가 되었다.</p>\n<h2>JDBC Template</h2>\n<p>이쯤에서 JDBC Template를 사용해서 같은 기능을 만들어 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">JdbcTemplate</span> jdbcTemplate<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 주입 받는다. </span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n    jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into users(id, name, password) values(?,?,?)\"</span><span class=\"token punctuation\">,</span>  \n            user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>같은 기능을 하는 JdbcTemplate의 update()메서드다\n우리가 위에서 템플릿/콜백 패턴으로 만들어낸 add()기능과 똑같다. </p>\n<p>이쯤에서 해당 update() 메서드의 내부구현을 보자</p>\n<p><em>JDBC template의 내부 코드를 따라가니 너무 복잡하다면 스킵하고 결론만 봐도 괜찮습니다</em></p>\n<p><em>+저의 부족하고 주관적인 의견으로 보는 과정이므로 틀린 부분이 있을 수 있습니다</em></p>\n<p>1층</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DataAccessException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArgPreparedStatementSetter</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>sql문과 이후 파라미터로 varargs를 써서 여러개의 Object를 받고 있다.\n일단 sql에 집중해보자</p>\n<p>2층</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">PreparedStatementSetter</span> pss<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DataAccessException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatementCreator</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimplePreparedStatementCreator</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatementSetter</span><span class=\"token punctuation\">)</span>pss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>쿼리문을 SimplePreparedStatementCreator에 생성자 파라미터로 넘겨주고 이를 PreparedStatementCreator로 형변환을 해주고 있다 </p>\n<p>SimplePreparedStatementCreator </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimplePreparedStatementCreator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PreparedStatementCreator</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SqlProvider</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SimplePreparedStatementCreator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SQL must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sql <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PreparedStatement</span> <span class=\"token function\">createPreparedStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> con<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//여기</span>\n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>createPreparedStatement()에 주목하면 될 것 같다.\n우리가 계속 보던 prepareStatement()를 return하고 있고,\nsql의 not null을 assert하고 sql도 따로 가질 수 있는 wrapper클래스로 이해하면 될 것 같다 </p>\n<p>3층</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">PreparedStatementCreator</span> psc<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PreparedStatementSetter</span> pss<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DataAccessException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Executing prepared SQL update\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token function\">updateCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>psc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">boolean</span> var9 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token class-name\">Integer</span> var4<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            var9 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pss <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                pss<span class=\"token punctuation\">.</span><span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n  \n            <span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SQL update affected \"</span> <span class=\"token operator\">+</span> rows <span class=\"token operator\">+</span> <span class=\"token string\">\" rows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n  \n            var4 <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">;</span>  \n            var9 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>var9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pss <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ParameterDisposer</span> parameterDisposer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                    parameterDisposer<span class=\"token punctuation\">.</span><span class=\"token function\">cleanupParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pss <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ParameterDisposer</span> parameterDisposerx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            parameterDisposerx<span class=\"token punctuation\">.</span><span class=\"token function\">cleanupParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n  \n        <span class=\"token keyword\">return</span> var4<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>this.execute()에서 쿼리문을 처리하고 있다.\n한층만 더 내려가보자</p>\n<p>4층\n드디어 도착!</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatementCreator</span> psc<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PreparedStatementCallback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> closeResources<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">DataAccessException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">//  </span>\n    <span class=\"token comment\">//    </span>\n    <span class=\"token class-name\">Connection</span> con <span class=\"token operator\">=</span> <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtainDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">Object</span> var18<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//   </span>\n    <span class=\"token comment\">//  </span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n        ps <span class=\"token operator\">=</span> psc<span class=\"token punctuation\">.</span><span class=\"token function\">createPreparedStatement</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">doInPreparedStatement</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        var18 <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> var14<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">//  </span>\n        <span class=\"token comment\">//</span>\n\t   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeStatement</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseConnection</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>closeResources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeStatement</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">DataSourceUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseConnection</span><span class=\"token punctuation\">(</span>con<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token comment\">//  </span>\n    <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">return</span> var18<span class=\"token punctuation\">;</span></code></pre></div>\n<p>예외처리에 관련된 부분은 주석처리하고 중요하다 생각되는 부분만 가져왔다. </p>\n<p>내부코드를 보면 Connection을 가져오고, Object 타입인 var18에 쿼리문 실행의 결과를 넣고 있다. 또한 try-catch-finally로 쓴 자원을 반환하고 있다. 그리고 result를 담은 var18을 반환하고 있다.</p>\n<p>우리가 만들어진 템플릿/콜백 패턴으로 만들어낸 JDBCContext와 같은 구조를 가지고 있는 것을 확인할 수 있다.</p>\n<h2>결론</h2>\n<p>순수한 JDBC를 개선하는 과정에서 변경되지 않는 부분을 따로 두고, 변경되는 부분만 추출하는 작업을 해보았다.</p>\n<p>그리고 이 과정에서 나온 결과물은 JDBCTemplate의 내부 구조와 아주 유사했다.</p>\n<p>즉, JDBC Template라는 것은 순수 JDBC에 디자인패턴(템플릿/콜백)을 적용하여 콜백에 해당하는 부분을 Public API로 드러낸 클래스라고 할 수 있다.</p>\n<p><em>틀린 부분이나 부족한 부분에 대한 피드백은 언제나 환영합니다</em></p>\n<hr>\n<p>참고</p>\n<p>토비의 스프링 3.1 vol </p>","frontmatter":{"title":"JDBC 에서 JDBC Template","date":"January 29, 2024","update":"January 29, 2024","tags":["spring","jdbc","designpattern"],"series":"spring"},"fields":{"slug":"/jdbc_template/","readingTime":{"minutes":11.845}}},"seriesList":{"edges":[{"node":{"id":"c17ef800-a544-57ca-92de-7d72b555fd0f","fields":{"slug":"/ioc_container/"},"frontmatter":{"title":"IoC와 스프링 컨테이너"}}},{"node":{"id":"6c65cd83-70af-5df5-abf5-60d838be2c24","fields":{"slug":"/spring_exception/"},"frontmatter":{"title":"AOP를 통한 Spring 예외처리"}}},{"node":{"id":"598faadf-ec7e-5e5f-877e-46e55774c613","fields":{"slug":"/jdbc_template/"},"frontmatter":{"title":"JDBC 에서 JDBC Template"}}}]},"previous":{"fields":{"slug":"/spring_exception/"},"frontmatter":{"title":"AOP를 통한 Spring 예외처리"}},"next":null},"pageContext":{"id":"598faadf-ec7e-5e5f-877e-46e55774c613","series":"spring","previousPostId":"6c65cd83-70af-5df5-abf5-60d838be2c24","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}