{"componentChunkName":"component---src-templates-post-jsx","path":"/argumentresolver/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"e135a9fa-ab66-51f6-b17b-59a3b7f2f7f3","excerpt":"개인과제를 진행하며 ArgumentResolver를 추가하여 코드를 개선한 기록 과제에서 만난 문제 개인 과제에서 밑과 같은 코드를 작성하게 되었다. Jwt토큰을 헤더에 넣는 방식으로 로그인 인증처리를 하고 있는데, 할일을 등록하기 위해서는 토큰 인증이 필요하고 request에서 헤더를 뽑아내서 토큰을 인증하고 인증이 통과하면 로직을 실행해야 하는 메서드…","html":"<p>개인과제를 진행하며 ArgumentResolver를 추가하여 코드를 개선한 기록</p>\n<h2>과제에서 만난 문제</h2>\n<p>개인 과제에서 밑과 같은 코드를 작성하게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">postTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> jwtUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getJwtFromHeader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//헤더에서 토큰 뽑기</span>\n    jwtUtil<span class=\"token punctuation\">.</span><span class=\"token function\">validateToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//검증</span>\n     \n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//  </span></code></pre></div>\n<p>Jwt토큰을 헤더에 넣는 방식으로 로그인 인증처리를 하고 있는데, 할일을 등록하기 위해서는 토큰 인증이 필요하고 request에서 헤더를 뽑아내서 토큰을 인증하고 인증이 통과하면 로직을 실행해야 하는 메서드를 작성하게 되었다.</p>\n<p>Todo를 등록하는 것 이외에도 조회, 삭제 ,수정 모두에 토큰 검증이 필요하기 때문에 해당 코드의 중복을 막을 수 있는 방법을 찾게 되었다.</p>\n<h2>ArgumentResolver 간단하게 알아보기</h2>\n<p>스프링을 쓰다 보면 다양한 파라미터를 어노테이션만 붙이고 사용한 경험이 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span>\n\t\t\t\t\t   <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">RequestDto</span> requestDto<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 이들은 ?어디서? 오는 거지 ?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>스프링은 위처럼 다양한 메서드 파라미터들을 스프링 내부의 <code class=\"language-text\">RequestMappingHandlerAdapter</code> 에서 어노테이션 기반으로 처리해서 우리가 쓰는 @Controller에 보내준다.</p>\n<p>잠깐 해당 클래스의 내부를 살펴볼까? </p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/dd88399e-9392-421f-b877-4387b7988ee5\" alt=\"Pasted image 20240204191203\">\n(클래스 내부의 일부다. 궁금하면 cmd+O로 검색 후 들어가보자!)</p>\n<p>해당 클래스 안에 보이는 <code class=\"language-text\">ArgumentResolver</code>들이  <code class=\"language-text\">DispatcherServlet</code>이 보내주는 http요청을 (밑에 살짝 보이는) <code class=\"language-text\">Converter</code>들을 이용해 우리가 필요로 하는 형태 변환해서 보내주고 있다.</p>\n<p>어떤 종류의 메서드 파라미터들을 할 수 있는지는 <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html\">공식문서</a>를 참고하도록 하자.</p>\n<p>그럼 이 Jwt토큰 검증을 하는 ArgumentResolver를 추가하면 우리는 토큰 검증을 통과한 request만 받을 수 있지 않을까?</p>\n<h2>HandlerMethodArgumentResolver 구현하기</h2>\n<p>내부에서 본 코드에서 <code class=\"language-text\">List&lt;HandlerMethodArgumentResolver></code>가 기억날지도 모르겠다.\n스프링이 제공하는 <code class=\"language-text\">ArgumentResolver</code>들은 <code class=\"language-text\">HandlerMethodArgumentResolver</code> interface를 구현하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HandlerMethodArgumentResolver</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Nullable</span>  \n    <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">WebDataBinderFactory</span> binderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉, 우리는 이 인터페이스를 구현하고 아까 본 List에 넣어주기만 하면 된다. </p>\n<p><code class=\"language-text\">supportsParameter()</code>는 해당 파라미터를 이 Resolver가 처리할 수 있는 지를 판단하고\n<code class=\"language-text\">resolveArgument()</code>를 호출해서 실제 객체를 생성하고 컨트롤러 호출시 넘겨준다</p>\n<p>그럼 구현해볼까? </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>  \n<span class=\"token annotation punctuation\">@Component</span>  \n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthArgumentResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerMethodArgumentResolver</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JwtUtil</span> jwtUtil<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">hasParameterAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Login</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//어노테이션</span>\n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span>  \n                                  <span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WebDataBinderFactory</span> binderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> webRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getNativeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> jwtUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getJwtFromHeader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>jwtUtil<span class=\"token punctuation\">.</span><span class=\"token function\">validateToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token class-name\">String</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"토큰 검증에 실패했습니다.\"</span><span class=\"token punctuation\">;</span>  \n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidTokenException</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> jwtUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getUserIdFromToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">User</span> found <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span>  \n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n                    <span class=\"token class-name\">String</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"ID로 유저를 찾을 수 없습니다. 요청 ID: \"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">;</span>  \n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"검증 통과!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDto</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 <code class=\"language-text\">resolveArgument()</code>에서 토큰 검증을 하고 토큰에서 id를 가지고 user를 만들어 UserDto로 보내주게 되었다.</p>\n<p><code class=\"language-text\">supportsParameter()</code>에 있는 <code class=\"language-text\">Login.class</code>는 어노테이션 메소드 인자로 UserDto를 바로 받기 위해서 만들었다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMETER</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//파라미터로 이 어노테이션을 생성할 수 있다</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Login</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//어노테이션 클래스로 지정</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>즉 <code class=\"language-text\">supportsParameter()</code>는 해당 파라미터에 @Login이 붙어있는지 보고,  <code class=\"language-text\">resolveArgument</code>는 해당 파라미터에 들어가는 요청에서 토큰을 검증하고 검증이 성공하면 UserDto를 보내주는 것이다.</p>\n<h2>WebMvcConfigurer에 등록하기</h2>\n<p>스프링내에서 기능 확장을 하기 위해서는 <code class=\"language-text\">WebMvcConfigurer</code>를 상속받아서 인터페이스 구현체를 등록해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>  \n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AuthArgumentResolver</span> authArgumentResolver<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addArgumentResolvers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HandlerMethodArgumentResolver</span><span class=\"token punctuation\">></span></span> resolvers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        resolvers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>authArgumentResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 등록해줬다. </p>\n<h2>완성코드</h2>\n<p>그럼 아까 처음에 본 postTodo()는 어떻게 변했을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">postTodo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Login</span> <span class=\"token class-name\">UserDto</span> userDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">//</span>\n    <span class=\"token comment\">//  </span></code></pre></div>\n<p>이렇게 토큰이 검증된 User 정보를 편하고 간편하게 쓸 수 있게 되었다.</p>\n<p><em>틀린 부분이나 부족한 부분에 대한 피드백은 언제나 환영합니다</em></p>\n<hr>\n<p>참고</p>\n<p>스프링 부트와 AWS로 혼자 구현하는 웹서비스 - 이동욱</p>\n<p>스프링 MVC 1편, 백엔드 웹 개발 핵심기술 - 김영한</p>","frontmatter":{"title":"ArgumentResolver추가로 코드 개선하기","date":"February 02, 2024","update":"February 02, 2024","tags":["spring","argumentresolver"],"series":"spring"},"fields":{"slug":"/argumentresolver/","readingTime":{"minutes":5.775}}},"seriesList":{"edges":[{"node":{"id":"c17ef800-a544-57ca-92de-7d72b555fd0f","fields":{"slug":"/ioc_container/"},"frontmatter":{"title":"IoC와 스프링 컨테이너"}}},{"node":{"id":"6c65cd83-70af-5df5-abf5-60d838be2c24","fields":{"slug":"/spring_exception/"},"frontmatter":{"title":"AOP를 통한 Spring 예외처리"}}},{"node":{"id":"598faadf-ec7e-5e5f-877e-46e55774c613","fields":{"slug":"/jdbc_template/"},"frontmatter":{"title":"JDBC 에서 JDBC Template"}}},{"node":{"id":"e135a9fa-ab66-51f6-b17b-59a3b7f2f7f3","fields":{"slug":"/argumentresolver/"},"frontmatter":{"title":"ArgumentResolver추가로 코드 개선하기"}}},{"node":{"id":"7cff2a81-ce61-50f3-82e6-67796b44edb7","fields":{"slug":"/acceptance_test/"},"frontmatter":{"title":"인수 테스트(Acceptance Test)"}}},{"node":{"id":"8ff84894-52cd-5648-be4d-4ae81514bfbb","fields":{"slug":"/api_performance_improvment/"},"frontmatter":{"title":"조회 API 성능 개선"}}}]},"previous":{"fields":{"slug":"/jdbc_template/"},"frontmatter":{"title":"JDBC 에서 JDBC Template"}},"next":{"fields":{"slug":"/acceptance_test/"},"frontmatter":{"title":"인수 테스트(Acceptance Test)"}}},"pageContext":{"id":"e135a9fa-ab66-51f6-b17b-59a3b7f2f7f3","series":"spring","previousPostId":"598faadf-ec7e-5e5f-877e-46e55774c613","nextPostId":"7cff2a81-ce61-50f3-82e6-67796b44edb7"}},"staticQueryHashes":[],"slicesMap":{}}