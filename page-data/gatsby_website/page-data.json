{"componentChunkName":"component---src-templates-post-jsx","path":"/gatsby_website/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"c4a1e307-464b-5e6f-811a-e2c1b5ad3393","excerpt":"Gatsby로 Github pages 개인 블로그 만들기 TIL을 적는 블로그와 기술블로그를 분리하고 싶어서 따로 웹사이트 만들 방법을 찾다가 github pages과 연동하여 손쉽게 웹사이트를 만들 수 있는 SSG 프레임워크를 찾게 되었다. 여러가지가 있지만 가장 많이 쓰이는 것들은  과  이다.  처음에는 로 웹사이트를 만들었지만 몇 가지 고치고 싶은…","html":"<h2>Gatsby로 Github pages 개인 블로그 만들기</h2>\n<p>TIL을 적는 블로그와 기술블로그를 분리하고 싶어서 따로 웹사이트 만들 방법을 찾다가 github pages과 연동하여 손쉽게 웹사이트를 만들 수 있는 SSG 프레임워크를 찾게 되었다. 여러가지가 있지만 가장 많이 쓰이는 것들은 <code class=\"language-text\">Jekyll</code> 과 <code class=\"language-text\">Gatsby</code> 이다. </p>\n<p>처음에는 <code class=\"language-text\">Jekyll</code>로 웹사이트를 만들었지만 몇 가지 고치고 싶은 사항들이 보였는데 나는 Ruby를 잘 모르기 때문에 내가 나중에 커스텀하기에 조금 무리가 있는 것 같아 <code class=\"language-text\">Gatsby</code>로 프레임워크를 바꾸게 되었다.</p>\n<p>나는 미리 만들어진 <a href=\"https://github.com/devHudi/gatsby-starter-hoodie\">테마</a> 를 사용했다.(감사합니다)</p>\n<h2>Gatsby 설치 와 웹사이트 설정</h2>\n<p>Gatsby cli를 설치해준다 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g gatsby-cli</code></pre></div>\n<p><code class=\"language-text\">Gatsby Starter Library</code>에서 마음에 드는 테마를 선택할 수 있다.\n원하는 테마를 고른 뒤</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx gatsby new {local-folder-name} {theme-name}</code></pre></div>\n<p>을 실행해 로컬에 Gatsby 템플레이트를  만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd {local-folder-name}\ngatsby develop</code></pre></div>\n<p>을 실행하면 로컬에서 개츠비 서버가 구동된다. 서버 주소는 <code class=\"language-text\">http://localhost:8000</code>이다. </p>\n<h2>Github Repository연결</h2>\n<p>Github의 새 리포지토리를 생성한다.\n나는 <code class=\"language-text\">{username}.github.io</code>로 이름을 지정했다.\n다른 이름을 쓰거나 소스코드용 리포지토리를 따로 두고 싶다면\n<a href=\"https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/\">Gatsby 공식문서</a> 를 참고하길 바란다</p>\n<p>리포지토리를 생성했다면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git remote add origin {github-https-address}</code></pre></div>\n<p>를 실행해 본인이 만든 웹사이트 폴더와 원격 저장소를 연결해준다.</p>\n<p>그리고 커스텀 블로그 설정, 포스트 작성등을 한 후 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git add .\ngit commit -m \"{commit-name}\"\ngit push origin main</code></pre></div>\n<p>위를 실행하여 원격 저장소에 로컬의 변경사항을 푸쉬해준다.</p>\n<h2>배포 방법 정하기</h2>\n<p>배포 방법에는 여러가지가 있지만 대표적인 2가지만 설명한다</p>\n<ol>\n<li>Netlify\nGithub과 유연하게 연동 되고 무료인 Netlify의 배포 시스템을 이용할 수 있다.\n<a href=\"https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/\">A Step-by-Step Guide: Gatsby on Netlify</a> 공식문서</li>\n<li>Github pages\nGithub pages에서 제공하는 <code class=\"language-text\">gh-pages</code>를 이용하여 배포할 수 있다\n<a href=\"https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/\">How Gatsby Works with GitHub Pages</a>공식 문서</li>\n</ol>\n<p>나는 Github pages를 이용했는데 Netlify는 커스텀 도메인이 없으면 <code class=\"language-text\">{smt}.netflify.app</code>를 도메인으로 제공해주는데 이 도메인보다 Github pages가 제공하는 <code class=\"language-text\">{smt}.github.io</code> 도메인이 마음에 들어서다(...)</p>\n<h2>Github Pages로 배포하기</h2>\n<p>배포용 브랜치 설정\ngh-pages는 배포용 브랜치가 따로 있어야 한다.<br>\n우리가 만든 gatsby 프로젝트의 main 브랜치에서 블로깅 작업을 했다면 public 폴더에 index.html이 있을텐데 기본적으로는 <code class=\"language-text\">.gitignore</code>에서 public을 푸쉬하지 않게 설정되어 있다.</p>\n<p>현 상태에서 배포용 브랜치를 하나 만들어 둔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git branch deploy</code></pre></div>\n<p>이 배포용 브랜치에 public 폴더를 따로 업로드하는 작업을 gh-pages가 해준다.\n<code class=\"language-text\">gh-pages</code>패키지를 설치하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install gh-pages</code></pre></div>\n<blockquote>\n<p>[Trouble Shooting]<br>\n나는 npm install 과중에서 dependency conflict가 발생했다.<br>\nnode 7 버전 이후 부터는 peer dependency를 자동으로 설치하기 때문에 이미 있는 dependency와 버전이 다를 경우 충돌이 발생한다</p>\n</blockquote>\n<blockquote>\n<p>-> 위의 install 커맨드에 <code class=\"language-text\">--force</code> 를 추가해서 충돌이 일어난 peer dependency를 강제 설치하거나 <code class=\"language-text\">--legacy-peer-deps</code>로 자동설치를 막는 방법이 있다. 나는 <code class=\"language-text\">--force</code>로 설치했다.</p>\n</blockquote>\n<p>다음은 <code class=\"language-text\">package.json</code> 에 배포에 사용할 스크립트를 추가해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"scripts\": {\n    \"deploy\": \"gatsby build &amp;&amp; gh-pages -d public -b deploy\"\n}</code></pre></div>\n<p>그리고</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm run deploy </code></pre></div>\n<p>를 실행한다.   </p>\n<blockquote>\n<p>[Trouble Shooting]<br>\n나는 위 커맨드를 실행하면 Segment Fault오류가 발생했는데 이럴때는\n<code class=\"language-text\">npm rebuild</code>로 npm을 다시 빌드하거나 <code class=\"language-text\">npm run clean</code>으로 캐쉬를 삭제 한후 다시 위 커맨드를 실행해주면 된다.</p>\n</blockquote>\n<p>이후\nGithub repository의 Settings-Pages\n<code class=\"language-text\">Build and deployment</code>에서 배포용 브랜치로 전환해준다.</p>\n<p>이렇게 까지 하면 <code class=\"language-text\">Actions</code>에서 웹사이트를 배포해주고 브라우저에서</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://{user-name}.github.io/</code></pre></div>\n<p> 주소로 접속이 가능해진다. </p>","frontmatter":{"title":"Gatsby와 Github Pages로 개인 블로그 만들기","date":"December 26, 2023","update":"December 26, 2023","tags":["gatsby","github_pages"],"series":"website"},"fields":{"slug":"/gatsby_website/","readingTime":{"minutes":5.41}}},"seriesList":{"edges":[{"node":{"id":"c4a1e307-464b-5e6f-811a-e2c1b5ad3393","fields":{"slug":"/gatsby_website/"},"frontmatter":{"title":"Gatsby와 Github Pages로 개인 블로그 만들기"}}}]},"previous":{"fields":{"slug":"/staticfactorymethod/"},"frontmatter":{"title":"정적 팩토리 메서드, 언제 쓸까?"}},"next":null},"pageContext":{"id":"c4a1e307-464b-5e6f-811a-e2c1b5ad3393","series":"website","previousPostId":"3bf07a5c-66d5-5e07-9411-b18a10843f1c","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}