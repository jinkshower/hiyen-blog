{"componentChunkName":"component---src-templates-post-jsx","path":"/spring_exception/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"6c65cd83-70af-5df5-abf5-60d838be2c24","excerpt":"개인과제를 진행하며 Spring의 AOP 예외 처리로 코드를 개선한 기록. 과제에서 마주한 문제 개인 과제를 진행하는 도중 Entity를 수정할때 비밀번호가 다를 경우 예외를 던지는 코드를 작성하게 되었다. 이 애플리케이션이 Java로 돌아가는 커맨드라인 프로그램이었다면 종료되었을 것이다. 하지만 Spring에서 별다른 예외처리를 하지 않고 그냥 thro…","html":"<p>개인과제를 진행하며 Spring의 AOP 예외 처리로 코드를 개선한 기록.</p>\n<h2>과제에서 마주한 문제</h2>\n<p>개인 과제를 진행하는 도중 Entity를 수정할때 비밀번호가 다를 경우 예외를 던지는 코드를 작성하게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduleResponseDto</span> <span class=\"token function\">updateSchedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ScheduleRequestDto</span> scheduleRequestDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Schedule</span> schedule <span class=\"token operator\">=</span> <span class=\"token function\">findSchedule</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">validatePassword</span><span class=\"token punctuation\">(</span>schedule<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> scheduleRequestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    schedule<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>scheduleRequestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduleResponseDto</span><span class=\"token punctuation\">(</span>schedule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validatePassword</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> origin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>origin<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ERROR] 패스워드가 다릅니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 애플리케이션이 Java로 돌아가는 커맨드라인 프로그램이었다면 종료되었을 것이다.</p>\n<p>하지만 Spring에서 별다른 예외처리를 하지 않고 그냥 throw로 던지는 예외의 경우 500상태코드를 반환하게 된다. </p>\n<p><code class=\"language-text\">사용자</code> 가 알맞은 비밀번호를 입력하지 않았는데, 500 상태코드가 반환된다.\n서버 에러 메시지를 보고 계속 같은 요청을 하는 사용자도 생길테고, 이는 전반적인 사용자 경험에 큰 악영향을 미친다\n또한 사용자는 자신의 요청에 대한 피드백을 제대로 받지 못한다.</p>\n<h2>첫 시도, Early Return</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">updateSchedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ScheduleRequestDto</span> requestDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Schedule</span> schedule <span class=\"token operator\">=</span> <span class=\"token function\">findSchedule</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>schedule<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">badRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"비밀번호가 다릅니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>   <span class=\"token comment\">// early return</span>\n\n    schedule<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>requestDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"수정 완료!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>수정하는 메서드에서 검증을 진행하고, 비밀번호가 다를 경우 상태코드와 함께 메시지를 전달하게 바꾸어 보았다.</p>\n<p>하지만 해당 방법은 </p>\n<ol>\n<li>검증이 필요한 모든 메서드에 early return을 적용해야 하고,</li>\n<li>검증 로직에 변경이 있을 경우 응답객체의 생성방식도 변경해야 한다.</li>\n<li>더불어 Service에서 응답객체를 만들기 때문에 Controller의 역할이 희미해진다 (싱크홀 안티패턴의 가능성)</li>\n</ol>\n<h2>두번째 시도, ResponseStatusException</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validatePassword</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> origin<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>origin<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseStatusException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[ERROR] 패스워드가 다릅니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Spring에서 제공하는 <code class=\"language-text\">ResponseStatusException</code>을 이용해 보았다.\n파라미터로 HttpStatus와 String의 메시지를 넣을 수 있으니 500 상태코드 대신 내가 원하는 코드와 메시지를 전달할 수 있다.</p>\n<p>하지만 위의 방법으로는 내가 직접 예외처리 코드를 작성하지 않은 다른 예외는 처리할 수 없다. </p>\n<p>(내 의견으로는) 500 상태 코드는 정말 서버내부에서 크리티컬한 문제가 났을 때만 보여줘야한다고 생각한다. </p>\n<p>즉, 내가 해당방법으로 하나하나 예외처리 해준 케이스 이외에 사용자의 잘못된 요청으로 예외가 발생하면 여전히 500 상태코드가 보여진다. </p>\n<h2>세번째 시도, @ExceptionHandler</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">//..  </span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">badRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ERROR] 잘못된 입력입니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드를 @Controller에 적용했다.</p>\n<p>@ExceptionHandler에 예외클래스를 명시한 후 @Controller에서 지정된 예외 클래스 하위의 예외가 발생시 어노테이션이 붙은 메서드를 실행하게 했다. </p>\n<p>이를 통해 직접 예외처리한 로직 이외에도 예외처리를 할 수 있게 되었고\n무엇보다도 500상태코드를 반환할 예외를 직접 지정할수 있게되었다. </p>\n<p>이 코드를 좀 더 확장성있게 쓸수 있지 않을까? </p>\n<h2>확장하기, @ContollerAdvice</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ControllerAdvice</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ControllerAdvice</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token annotation punctuation\">@ExceptionHandler</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">internalServerError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleIllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">badRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>@ControllerAdvice를 어노테이션으로 가지는 새로운 클래스를 작성했다.</p>\n<p>해당 어노테이션은 AOP(Aspect Oriented Programming)의 방식으로 예외처리를 많은 컨트롤러에서 <code class=\"language-text\">공통</code>으로 처리해야할 요소로 보고 @Controller어노테이션을 가진 모든 컨트롤러에서 발생하는 예외에 앞서 적용한 @ExceptionHandler의 예외처리 로직을 적용해 준다.</p>\n<p>코드를 보면 알수 있듯이 여러가지 Exception에 대해 어떤 응답을 보내줄지 메서드를 추가해서 확장할 수 있으므로 우리는 Java코드를 작성하는 것처럼 예외처리를 할 수 있게 되었고, 커스텀예외를 추가하는 것도 물론 가능하다. </p>\n<hr>\n<p>참고</p>\n<p><a href=\"https://mangkyu.tistory.com/204\">https://mangkyu.tistory.com/204</a></p>\n<p><a href=\"https://tecoble.techcourse.co.kr/post/2020-07-28-global-exception-handler/\">https://tecoble.techcourse.co.kr/post/2020-07-28-global-exception-handler/</a> </p>","frontmatter":{"title":"AOP를 통한 Spring 예외처리","date":"January 24, 2024","update":"January 24, 2024","tags":["spring","exception","exceptionhandler"],"series":"spring"},"fields":{"slug":"/spring_exception/","readingTime":{"minutes":5.485}}},"seriesList":{"edges":[{"node":{"id":"c17ef800-a544-57ca-92de-7d72b555fd0f","fields":{"slug":"/ioc_container/"},"frontmatter":{"title":"IoC와 스프링 컨테이너"}}},{"node":{"id":"6c65cd83-70af-5df5-abf5-60d838be2c24","fields":{"slug":"/spring_exception/"},"frontmatter":{"title":"AOP를 통한 Spring 예외처리"}}},{"node":{"id":"598faadf-ec7e-5e5f-877e-46e55774c613","fields":{"slug":"/jdbc_template/"},"frontmatter":{"title":"JDBC 에서 JDBC Template"}}},{"node":{"id":"e135a9fa-ab66-51f6-b17b-59a3b7f2f7f3","fields":{"slug":"/argumentresolver/"},"frontmatter":{"title":"ArgumentResolver추가로 코드 개선하기"}}},{"node":{"id":"7cff2a81-ce61-50f3-82e6-67796b44edb7","fields":{"slug":"/acceptance_test/"},"frontmatter":{"title":"인수 테스트(Acceptance Test)"}}}]},"previous":{"fields":{"slug":"/ioc_container/"},"frontmatter":{"title":"IoC와 스프링 컨테이너"}},"next":{"fields":{"slug":"/jdbc_template/"},"frontmatter":{"title":"JDBC 에서 JDBC Template"}}},"pageContext":{"id":"6c65cd83-70af-5df5-abf5-60d838be2c24","series":"spring","previousPostId":"c17ef800-a544-57ca-92de-7d72b555fd0f","nextPostId":"598faadf-ec7e-5e5f-877e-46e55774c613"}},"staticQueryHashes":[],"slicesMap":{}}