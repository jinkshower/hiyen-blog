{"componentChunkName":"component---src-templates-post-jsx","path":"/redis_deeper/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"10982119-8b41-58d8-b2a9-83f45f276930","excerpt":"학습 계기 저번글에서 프로젝트의 예매 로직에서의 동시성 제어를 Redis로 해결하기로 결정했습니다. redis가 프로젝트의 핵심기능에서 중요한 역할을 하는 만큼 좀 더 자세히 학습할 필요가 있다고 생각했습니다. 또한 프로젝트에서 Redis의 관리가 중요한 대목으로 떠올랐는데요! 이번 글에서는 Redis를 자세히 알아보고 저희 프로젝트에서 어떻게 Redis…","html":"<h2>학습 계기</h2>\n<p><a href=\"https://jinkshower.github.io/ticket_reservation_concurrency/\">저번글</a>에서 프로젝트의 예매 로직에서의 동시성 제어를 Redis로 해결하기로 결정했습니다. redis가 프로젝트의 핵심기능에서 중요한 역할을 하는 만큼 좀 더 자세히 학습할 필요가 있다고 생각했습니다.</p>\n<p>또한 프로젝트에서 Redis의 관리가 중요한 대목으로 떠올랐는데요! 이번 글에서는 Redis를 자세히 알아보고 저희 프로젝트에서 어떻게 Redis를 적용했는지 다루어보려고 합니다.</p>\n<h2>Redis</h2>\n<p>Redis는 인메모리 기반의 데이터 저장소로서, 빠른 속도와 간편한 사용성으로 널리 알려져 있습니다. </p>\n<p>주로 캐싱, 세션 관리, 메시지 큐, 실시간 분석 등 다양한 용도로 활용됩니다. Redis는 다양한 자료구조를 지원하며, 복제, 클러스터링, 트랜잭션 등의 기능을 제공하여 안정적이고 확장 가능한 시스템을 구축할 수 있습니다.</p>\n<p><code class=\"language-text\">저희 프로젝트에서 레디스를 캐시보다는 db로 사용하니 redis의 자료구조에 집중하려 합니다.</code></p>\n<p>레디스를 캐시로 사용하는 전략은 <a href=\"https://inpa.tistory.com/entry/REDIS-%F0%9F%93%9A-%EC%BA%90%EC%8B%9CCache-%EC%84%A4%EA%B3%84-%EC%A0%84%EB%9E%B5-%EC%A7%80%EC%B9%A8-%EC%B4%9D%EC%A0%95%EB%A6%AC\">해당 글</a>을 참조하면 좋을 것 같습니다.</p>\n<h2>Redis 자료구조</h2>\n<p>Redis는 다양한 형태의 자료구조를 제공합니다.\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/52d38e0f-cb40-40cd-94f6-e8ca8b5d03ce\" alt=\"Pasted image 20240411174307\"></p>\n<h3>1. String</h3>\n<p>문자열은 가장 간단한 형태의 자료구조로서 키와 값을 가지고 있습니다.\n단순 증감 연산에 좋다고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SET key value \nGET key</code></pre></div>\n<h3>2. Hash</h3>\n<p>해시는 키와 여러 개의 필드와 값으로 구성되어 있습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HSET key field value \nHGET key field</code></pre></div>\n<h3>3. List</h3>\n<p>리스트는 여러 개의 요소를 순서대로 저장하는 자료구조입니다.\nBlocking 기능을 통해 Event Queue로도 활용이 가능하다고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">LPUSH key value1 value2 ... \nLRANGE key start stop</code></pre></div>\n<h3>4. Set</h3>\n<p>셋은 중복되지 않는 여러 개의 멤버를 저장하는 자료구조입니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SADD key member1 member2 ... \nSMEMBERS key</code></pre></div>\n<h3>5. Sorted Set</h3>\n<p>정렬 집합은 셋과 비슷하지만 각 멤버에 대해 순서를 지정하여 저장합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ZADD key score1 member1 score2 member2 ... \nZRANGE key start stop WITHSCORES</code></pre></div>\n<h3>6. Bitmaps</h3>\n<p>0 또는 1의 값을 가진 이진 데이터를 저장하는 자료구조입니다.\n정수로 된 데이터만 카운팅 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SETBIT key offset value \nGETBIT key offset</code></pre></div>\n<h3>7. HyperLogLogs</h3>\n<p>고유한 요소의 개수를 근사치로 추정하는 확률적 자료구조입니다\n대용량 데이터를 카운팅할 때 적절하며 12kb고정으로 용량을 매우 적게 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PFADD key element1 element2 ... \nPFCOUNT key</code></pre></div>\n<h3>8. Streams</h3>\n<p>타임스탬프와 함께 연결된 메시지 시퀀스를 저장하는 자료구조입니다\n로그를 저장하기 가장 적절한 자료구조입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">XADD key ID field1 value1 field2 value2 ... \nXREAD COUNT count STREAMS key ID</code></pre></div>\n<h2>어떤 자료구조를 써야할까?</h2>\n<p>자료구조를 결정하기 전에 어떠한 자료구조가 필요한지 먼저 파악해야겠죠?</p>\n<p>이전 글에서는 간단하게 key-value값, 즉 String으로 저장하고 key가 있는지 없는지만 체크하는 방식을 썼습니다.</p>\n<p>하지만 Redis는 인메모리 DB구조, 즉 RAM을 사용하기 때문에 속도가 빠르지만 그만큼 용량이 작기 때문에 메모리 관리가 필수적입니다.</p>\n<p>따라서 비즈니스에서 요구하는 로직에 맞는 자료구조를 적절히 선택하는게 Redis를 제대로 사용하는 첫걸음입니다.</p>\n<p>다시 한 번 저희 예매 로직을 살펴볼까요 ?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ReservationResponseDto</span> <span class=\"token function\">createReservation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> concertId<span class=\"token punctuation\">,</span>  \n    <span class=\"token class-name\">ReservationRequestDto</span> requestDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Concert</span> concert <span class=\"token operator\">=</span> <span class=\"token function\">findConcert</span><span class=\"token punctuation\">(</span>concertId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTaken</span><span class=\"token punctuation\">(</span>concertId<span class=\"token punctuation\">,</span> requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getVertical</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomRuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이미 예약된 좌석입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n  \n    <span class=\"token class-name\">Seat</span> seat <span class=\"token operator\">=</span> seatRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findSeatForReservation</span><span class=\"token punctuation\">(</span>concertId<span class=\"token punctuation\">,</span> requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n        requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getVertical</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>seat<span class=\"token punctuation\">.</span><span class=\"token function\">isReservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomRuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"예약 불가능한 좌석입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    seat<span class=\"token punctuation\">.</span><span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token class-name\">Reservation</span> reservation <span class=\"token operator\">=</span> <span class=\"token class-name\">Reservation</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">userId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">concertId</span><span class=\"token punctuation\">(</span>concertId<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">seatId</span><span class=\"token punctuation\">(</span>seat<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">Reservation</span> save <span class=\"token operator\">=</span> reservationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>reservation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ReservationResponseDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">userId</span><span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">concertId</span><span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">.</span><span class=\"token function\">getConcertId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">seatId</span><span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">.</span><span class=\"token function\">getSeatId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">isTaken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> concertId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> horizontal<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> vertical<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> concertId <span class=\"token operator\">+</span> horizontal <span class=\"token operator\">+</span> vertical<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>  \n        redisUtil<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"reserved\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 Redis에 저장해야 될 정보만을 보겠습니다.</p>\n<p><code class=\"language-text\">concertId, horizontal + vertical</code>\n즉 1과 A1을 저장해야하고 이 두 값이 같은 요청에는 다른 응답을 줘야 합니다.</p>\n<p>지금은 \"1A1\"과 같은 형태로 key를 저장하는데요, 좌석 행열 정보는 콘서트마다 몇 천개 정도는 생길 수 있고 콘서트도 얼마든지 생길 수 있기 때문에 key가 너무 많아져 메모리에 문제가 생길 수 있습니다.</p>\n<p>따라서 현재 필요한 자료구조로는 Set, Hash, Sorted Set정도를 생각할 수 있겠습니다.</p>\n<p>concertId를 key값으로 두고 행열을 set의 value, hash의 field로 둔다면 콘서트 개수만큼만 key가 생기는 거니 메모리 효율성 측면에서 훨씬 낫다고 판단됩니다.</p>\n<h2>\bSet을 선택한 이유</h2>\n<p>저희가 선택한 자료구조는 Set이었습니다.</p>\n<p>현재 상황에서 Redis는 1A1라는 요청이 이미 있나, 없나만 판단하는 역할을 하면 됩니다.</p>\n<p>콘서트와 콘서트의 좌석 수가 많아질 수 있는 만큼 순서(sorted set)나 더 많은 정보(hash) 관리를 Redis가 담당하면 메모리 관리 지점이 더 늘어날 여지가 크다고 판단했습니다.</p>\n<p>Set의 최대의 장점은 속도인데요, value간의 순서를 보장할 필요가 없으므로 추가, 삭제, 조회가 훨씬 더 빠릅니다.\n예매요청이 동시에 많이 일어날 수 있으니 현재 상황에서 가장 적합한 자료구조로 생각됐습니다.</p>\n<h2>Set 적용하기</h2>\n<p>Redis Set의 명령어를 다시 한번 확인할까요? </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">127.0.0.1:6379> sadd 1 A1 A2 A3\n(integer) 3\n127.0.0.1:6379> smembers 1\n1) \"A1\"\n2) \"A2\"\n3) \"A3\"\n127.0.0.1:6379> sadd 1 A1\n(integer) 0</code></pre></div>\n<p><code class=\"language-text\">sadd key value</code>는 value값이 추가된 만큼의 integer를 반환합니다.\n또한 value가 이미 존재할 경우에는 0을 반환하는 것을 확인했습니다.</p>\n<p>해당 명령어를 spring boot 프로젝트에 적용해봤습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">addSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 메서드를 isTaken()에 적용하면 되겠군요.</p>\n<h2>Redis 메모리, 삭제 정책 적용하기</h2>\n<p>하지만 이대로 끝인걸까요? 좀 더 메모리를 효율적으로 쓸 수 있는 방법은 없을까요?</p>\n<p>있습니다. 바로 redis의 메모리 휘발성을 이용하는 겁니다.</p>\n<p>Redis는 기본적으로 TTL(Time To Live)가 무한대로 설정되는데요, <code class=\"language-text\">expire</code> 명령을 통해 해당 값의 만료시간을 설정할 수 있습니다.</p>\n<p>현재 저희 프로젝트에서 콘서트가 시작되면 예매 정보를 따로 저장하는 테이블이 있기 때문에 예매를 막는 Redis의 자료들은 모두 쓸모가 없어집니다.</p>\n<p>이를 이용해 저장된 값들의 TTL을 현재시각과 콘서트 시작시각의 차이로 지정하면 메모리를 더 효율적으로 사용할 수 있다고 생각했습니다.</p>\n<p>하지만 문제가 있었습니다. Redis에 <code class=\"language-text\">sadd</code> 명령과 <code class=\"language-text\">expire</code> 이 하나의 메서드로 작용하면  value가 추가될 때마다 key의 만료시간이 갱신되버립니다. 따라서 콘서트 시작 직전의 예매 하나 때문에 만료시간이 다시 갱신될 수도 있습니다.</p>\n<p>따라서 concertId라는 key값이 처음 생성될 때 만료시간이 설정되고 이후의 value들은 <code class=\"language-text\">expire</code>명령을 실행해서는 안되는 상황입니다.</p>\n<h2>Lua 스크립트로 Redis 명령을 커스텀하자</h2>\n<p>사용자 정의 명령이 필요하다면 Lua 스크립트를 작성해야 합니다.</p>\n<ol>\n<li>Lua 스크립트 작성</li>\n<li>RedisTemplate의 execute로 작성된 스크립트 실행 </li>\n</ol>\n<p>의 구조로 되어있는데요, 간단하게 코드로 볼까요 ?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">customCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> script <span class=\"token operator\">=</span> <span class=\"token string\">\"return redis.call('set', KEYS[1], ARGV[1])\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> luaScript <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>luaScript<span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>String으로 스크립트를 저장하고 이를 통해 DefaultRedisScript를 생성하고 execute에 생성된 스크립트, 키값, value를 전달하여 실행합니다.</p>\n<p>저희에게 필요한 lua script를 작성해보았습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> keyExists <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exists'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">local</span> isAdded\n<span class=\"token keyword\">if</span> keyExists <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span>\n    redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sadd'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expire'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    isAdded <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span>\n    isAdded <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sadd'</span><span class=\"token punctuation\">,</span> KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">tostring</span><span class=\"token punctuation\">(</span>isAdded<span class=\"token punctuation\">)</span></code></pre></div>\n<p>key가 존재하는지 확인하고, 존재하지 않는다면 <code class=\"language-text\">sadd</code>와 <code class=\"language-text\">expire</code>을 실행하고 존재한다면 <code class=\"language-text\">sadd</code>의 리턴값을 반환하는 스크립트입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> expiredTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">StringBuffer</span> stringBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"local keyExists = redis.call('exists', KEYS[1]) \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"local isAdded \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"if keyExists == 0 then \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    redis.call('sadd', KEYS[1], ARGV[1]) \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    redis.call('expire', KEYS[1], ARGV[2]) \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    isAdded = 1 \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"else \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    isAdded = redis.call('sadd', KEYS[1], ARGV[1]) \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return tostring(isAdded)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> script <span class=\"token operator\">=</span> stringBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> luaScript <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>luaScript<span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> expiredTime<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>스크립트가 추가된 <code class=\"language-text\">addSet</code>메서드 입니다.</p>\n<p>이제 해당 메서드로 동시성 테스트를 실행하면\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/94b48661-7883-4dc0-a323-4b80f612d156\" alt=\"Pasted image 20240410164944\">\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/76e1b413-2477-4589-9f15-a283bbe549ea\" alt=\"Pasted image 20240410165002\">\n테스트는 통과하고</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">127.0.0.1:6379> ttl 1\n(integer) 5115</code></pre></div>\n<p>redis의 ttl도 정상적으로 세팅된 것을 확인할 수 있습니다.</p>\n<h2>Redis 데이터 영구 저장하기</h2>\n<p>처음 부분에서 말씀드린것처럼 Redis는 인메모리 기반으로 작동하기 때문에 서버 재시작시 모든 데이터가 사라집니다</p>\n<p>따라서 Redis를 캐시 이외의 용도로 사용할시에는 적절한 데이터 백업이 필요한데요.\n이에는 두가지 방법이 있습니다.</p>\n<ol>\n<li>RDB\n스냅샷 저장 방식으로 당시의 메모리 그대로 파일로 저장.\n특정 조건이 만족되면 스냅샷을 찍는 방식이므로 조건 전에 Redis가 종료되면 그 사이 데이터는 유실됩니다.</li>\n<li>AOF\n데이터 변경 커맨드를 모두 저장\n모든 쓰기 명령에 대한 로그를 남기기 때문에 장애 상황 직전까지 모든 데이터가 보장됩니다.</li>\n</ol>\n<p>저희는 당연히 예매 기능에서 Redis의 db정보가 중요한 역할을 하기 때문에 AOF를 선택하였습니다.</p>\n<p>AOF 설정은 redis.conf파일의 <code class=\"language-text\">appendonly</code>를 <code class=\"language-text\">yes</code>로 변경하면 AOF가 적용되고 서버 시작시 aof파일을 읽어서 db에 그대로 다시 저장하게 됩니다.</p>\n<h2>마치며</h2>\n<p>이렇게 Redis의 자료구조와 메모리 관리, 영속화에 대해 알아보고 저희 프로젝트에 적용을 해봤습니다. Redis를 공부하며 제대로 쓰기 위해서는 좀 더 깊은 학습이 필요하다고 느껴졌고 이후에도 계속 학습하며 적용해보도록 하겠습니다.</p>\n<hr>\n<p>참고</p>\n<p><a href=\"https://www.youtube.com/watch?v=92NizoBL4uA&#x26;t=1411s\">https://www.youtube.com/watch?v=92NizoBL4uA&#x26;t=1411s</a> </p>","frontmatter":{"title":"Redis, 좀 더 자세히 알아볼까?","date":"April 12, 2024","update":"April 12, 2024","tags":["redis"],"series":"redis"},"fields":{"slug":"/redis_deeper/","readingTime":{"minutes":14.14}}},"seriesList":{"edges":[{"node":{"id":"10982119-8b41-58d8-b2a9-83f45f276930","fields":{"slug":"/redis_deeper/"},"frontmatter":{"title":"Redis, 좀 더 자세히 알아볼까?"}}}]},"previous":{"fields":{"slug":"/domain_refactoring/"},"frontmatter":{"title":"리팩토링을 통해 유연한 도메인을 만들자!"}},"next":null},"pageContext":{"id":"10982119-8b41-58d8-b2a9-83f45f276930","series":"redis","previousPostId":"ff98243f-757c-5a9c-a838-c8efb698054e","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}