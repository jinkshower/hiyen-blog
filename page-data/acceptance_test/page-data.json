{"componentChunkName":"component---src-templates-post-jsx","path":"/acceptance_test/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"7cff2a81-ce61-50f3-82e6-67796b44edb7","excerpt":"인수 테스트란 무엇일까? 알아보고 적용해본 인수테스트  학습 계기 개인 과제 중 테스트에 관련해 튜터님께 피드백을 받게 되었다\n\n이와 관련해 고민과 검색을 하다  라는 키워드를 찾아내게 되었다.  인수테스트 인수테스트(Acceptance Test)란 소프트웨어 테스팅 기법 중 하나로 소프트웨어의 수용성을 테스트하는 기법이다. 인수테스트를 통해 비즈니스 요…","html":"<p>인수 테스트란 무엇일까? 알아보고 적용해본 인수테스트 </p>\n<h2>학습 계기</h2>\n<p>개인 과제 중 테스트에 관련해 튜터님께 피드백을 받게 되었다\n<code class=\"language-text\">서비스로서의 기능을 테스트하는 것도 중요하다</code>\n이와 관련해 고민과 검색을 하다  <code class=\"language-text\">인수 테스트</code>라는 키워드를 찾아내게 되었다. </p>\n<h2>인수테스트</h2>\n<p>인수테스트(Acceptance Test)란 소프트웨어 테스팅 기법 중 하나로 소프트웨어의 수용성을 테스트하는 기법이다.</p>\n<p>인수테스트를 통해 비즈니스 요구사항에 대한 소프트웨어의 적합성을 평가하고 소프트웨어를 회사가  <code class=\"language-text\">인수</code>해도 되는지를 측정한다고 한다.</p>\n<p>인수 테스트는 유저가 소프트웨어를 사용하는 시나리오를 적용하여 테스트를 진행하게 된다.</p>\n<p>예를 들어 'spring이라는 필터를 클릭하면 spring을 포함하는 목록을 보여준다'가 테스트 이름이 될 수 있겠다.</p>\n<h2>적용하기</h2>\n<p>자바에서는 <code class=\"language-text\">MockMvc</code>나 <code class=\"language-text\">RestAssured</code>를 이용해서 인수테스트를 진행한다고 한다. </p>\n<p>인수테스트는 실제 시나리오를 테스트하기 위함이기 때문에 @SpringBootTest로 웹 환경을 사용하는 <code class=\"language-text\">RestAssured</code>를 공부하기로 했다</p>\n<p><a href=\"https://github.com/rest-assured/rest-assured/wiki/Usage\">공식문서</a> 와 각종 구글링으로 사용법을 익혔고\nassertJ와 합쳐서 테스트를 작성했다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"토큰을 가졌지만 할일의 userId와 동일하지 않은 id를 가진 유저는 할 일의 상태를 수정 할 수 없다\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">test8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">//given  </span>\n    <span class=\"token function\">postTodo</span><span class=\"token punctuation\">(</span>postRequestDto<span class=\"token punctuation\">,</span> validToken1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token comment\">//when  </span>\n    <span class=\"token class-name\">ExtractableResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> validToken2<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">patch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todos/1/status\"</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token comment\">//then  </span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"작성자가 다릅니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그렇게 작성한 테스트 중 하나를 가져와봤다. </p>\n<p><code class=\"language-text\">given</code></p>\n<p>id를 가진 토큰으로 할일이 작성 되었을때</p>\n<p><code class=\"language-text\">when</code></p>\n<p>다른 id를 가진 토큰을 헤더에 포함한 <code class=\"language-text\">/api/todos/1/status</code>라는 http 요청을 보내면</p>\n<p><code class=\"language-text\">then</code></p>\n<p>응답의 상태코드가 400임을 확인하고 에러메시지를 확인한다</p>\n<p>when 부분의 코드를 자세히 보면 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token class-name\">ExtractableResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Response</span><span class=\"token punctuation\">></span></span> response <span class=\"token operator\">=</span> <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//요청에 대한 조건을 추가할 수 있다</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> validToken2<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">patch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/todos/1/status\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// http요청을 보낼수있다</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//응답을 모두 기록하여 추출할 수 있다</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>로 정리할 수 있겠다.\ngiven()과 then()에 log().all()을 추가해서 응답과 요청 내용을 콘솔에 찍어서 디버그에 유용하게 쓸 수도 있다. </p>\n<h2>느낀점</h2>\n<p>인수테스트를 작성하다보니 자연스레 api명세서 자체를 테스트하고 있음을 깨닫게 되었다.</p>\n<p>또한 하나의 기능을 테스트하기 위해서는 이전 기능이 모두 작동해야하기 때문에 넓은 테스트 커버리지를 달성할 수 있었다.</p>\n<p>무엇보다 요청과 응답을 모두 콘솔에 찍을 수 있기 때문에 postman으로 직접 실행하고 디버깅하는 것보다 편한 부분이 있었다.</p>\n<h2>하지만</h2>\n<p>예시코드에서 <code class=\"language-text\">postTodo()</code>를 다시 보면 한줄이라 간단해 보이지만\n<code class=\"language-text\">회원가입</code> -<code class=\"language-text\">로그인</code> 의 과정을 모두 거치고서야 할일을 등록할 수 있기 때문에 해당 클래스의 코드가 많아지는 것은 물론이고 테스트를 돌리는데 시간도 많이 걸린다.</p>\n<p>또한 random_port를 사용하는 테스트는 @Transactional이 적용되지 않기 때문에 테스트의 격리가 어려워 진다.</p>\n<p>아직 나만의 방법을 찾지 못해서 임시방편으로 @AfterEach로 데이터베이스를 초기화하고 있지만 좋은 방법은 아닌 것같다. </p>\n<p>당장 찾아본 방법은 </p>\n<ol>\n<li>MockMvc를 사용한다</li>\n<li>의도적으로 다른 데이터를 사용한다</li>\n<li>@DirtiesContext를 사용한다</li>\n</ol>\n<p>정도 인데 테스트 격리에 대해 조금 더 생각이 정리되면 코드로 적어보고 글로 작성해보려고 한다.</p>\n<p><em>틀린 부분이나 부족한 부분에 대한 피드백은 언제나 환영합니다</em></p>\n<hr>\n<p>참고</p>\n<p><a href=\"https://www.geeksforgeeks.org/acceptance-testing-software-testing/\">https://www.geeksforgeeks.org/acceptance-testing-software-testing/</a></p>\n<p><a href=\"https://tecoble.techcourse.co.kr/post/2021-05-25-unit-test-vs-integration-test-vs-acceptance-test/\">https://tecoble.techcourse.co.kr/post/2021-05-25-unit-test-vs-integration-test-vs-acceptance-test/</a></p>","frontmatter":{"title":"인수 테스트(Acceptance Test)","date":"February 04, 2024","update":"February 04, 2024","tags":["spring","acceptancetest","testing"],"series":"spring"},"fields":{"slug":"/acceptance_test/","readingTime":{"minutes":5.36}}},"seriesList":{"edges":[{"node":{"id":"c17ef800-a544-57ca-92de-7d72b555fd0f","fields":{"slug":"/ioc_container/"},"frontmatter":{"title":"IoC와 스프링 컨테이너"}}},{"node":{"id":"6c65cd83-70af-5df5-abf5-60d838be2c24","fields":{"slug":"/spring_exception/"},"frontmatter":{"title":"AOP를 통한 Spring 예외처리"}}},{"node":{"id":"598faadf-ec7e-5e5f-877e-46e55774c613","fields":{"slug":"/jdbc_template/"},"frontmatter":{"title":"JDBC 에서 JDBC Template"}}},{"node":{"id":"e135a9fa-ab66-51f6-b17b-59a3b7f2f7f3","fields":{"slug":"/argumentresolver/"},"frontmatter":{"title":"ArgumentResolver추가로 코드 개선하기"}}},{"node":{"id":"7cff2a81-ce61-50f3-82e6-67796b44edb7","fields":{"slug":"/acceptance_test/"},"frontmatter":{"title":"인수 테스트(Acceptance Test)"}}}]},"previous":{"fields":{"slug":"/argumentresolver/"},"frontmatter":{"title":"ArgumentResolver추가로 코드 개선하기"}},"next":{"fields":{"slug":"/cookie_session/"},"frontmatter":{"title":"쿠키와 세션"}}},"pageContext":{"id":"7cff2a81-ce61-50f3-82e6-67796b44edb7","series":"spring","previousPostId":"e135a9fa-ab66-51f6-b17b-59a3b7f2f7f3","nextPostId":"09ffcdb3-3e65-58e3-9ed6-90519052fedf"}},"staticQueryHashes":[],"slicesMap":{}}