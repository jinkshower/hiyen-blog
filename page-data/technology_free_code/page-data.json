{"componentChunkName":"component---src-templates-post-jsx","path":"/technology_free_code/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"ca9fbb61-c38d-5470-9356-76fec2e7afd2","excerpt":"리팩토링","html":"<p>리팩토링</p>","frontmatter":{"title":"기술변경에 확장성을 가진 리팩토링","date":"April 22, 2024","update":"April 22, 2024","tags":["refactoring","interface","test"],"series":"java"},"fields":{"slug":"/technology_free_code/","readingTime":{"minutes":0.02}}},"seriesList":{"edges":[{"node":{"id":"3bf07a5c-66d5-5e07-9411-b18a10843f1c","fields":{"slug":"/staticfactorymethod/"},"frontmatter":{"title":"정적 팩토리 메서드, 언제 쓸까?"}}},{"node":{"id":"b9b7d25c-152b-564e-804d-45dc8b79e7aa","fields":{"slug":"/builder_pattern/"},"frontmatter":{"title":"Builder Pattern으로 코드 개선하기"}}},{"node":{"id":"fdf4dd31-0e89-586d-afc5-f7e7df28cbff","fields":{"slug":"/dependency_injection/"},"frontmatter":{"title":"의존성 주입(Dependency Injection)"}}},{"node":{"id":"ff98243f-757c-5a9c-a838-c8efb698054e","fields":{"slug":"/domain_refactoring/"},"frontmatter":{"title":"리팩토링을 통해 유연한 도메인을 만들자!"}}},{"node":{"id":"ca9fbb61-c38d-5470-9356-76fec2e7afd2","fields":{"slug":"/technology_free_code/"},"frontmatter":{"title":"기술변경에 확장성을 가진 리팩토링"}}}]},"previous":{"fields":{"slug":"/db_replication/"},"frontmatter":{"title":"알아보고 적용하는 DB Replication"}},"next":{"fields":{"slug":"/monitoring/"},"frontmatter":{"title":"Actuator, Prometheus, Grafana로 서버 장애 대응하기"}}},"pageContext":{"id":"ca9fbb61-c38d-5470-9356-76fec2e7afd2","series":"java","previousPostId":"c6508d6f-9443-5899-9f18-6f5ec12c7d72","nextPostId":"3243d1e2-cbd1-5c85-94bb-6d089878a5cb"}},"staticQueryHashes":[],"slicesMap":{}}