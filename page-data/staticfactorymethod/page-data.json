{"componentChunkName":"component---src-templates-post-jsx","path":"/staticfactorymethod/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"3bf07a5c-66d5-5e07-9411-b18a10843f1c","excerpt":"정적 팩토리 메서드란? Java에서는   연산자를 이용하여 클래스의 인스턴스를 생성하는 것 외에  메서드를 사용하여 인스턴스를 반환 받는 기법이 있다. 간단한 예시로 사용방법을 알아 보자.  이  클래스는 두개의 변수를 받는 생성자를 가지고 있다.  여기에  를 추가함으로써 인스턴스를 반환 받는 다른  를  생성하는 기법이라고 할 수 있다.  정적팩토리 …","html":"<h2>정적 팩토리 메서드란?</h2>\n<p>Java에서는 <code class=\"language-text\">new</code>  연산자를 이용하여 클래스의 인스턴스를 생성하는 것 외에 <code class=\"language-text\">static</code> 메서드를 사용하여 인스턴스를 반환 받는 기법이 있다.</p>\n<p>간단한 예시로 사용방법을 알아 보자. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 <code class=\"language-text\">Car</code> 클래스는 두개의 변수를 받는 생성자를 가지고 있다.  여기에</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">정적 팩토리 메서드</code> 를 추가함으로써 인스턴스를 반환 받는 다른 <code class=\"language-text\">통로</code> 를  생성하는 기법이라고 할 수 있다. </p>\n<h2>정적팩토리 메서드, 왜 쓰나?</h2>\n<p><code class=\"language-text\">Effective Java</code>는 1장에서 <code class=\"language-text\">생성자 대신 정적 팩토리 메서드를 고려하라</code> 라고 말한다. 그리고 그에 대한 장점과 단점에 대해 설명하는데 이와 관련된 잘 정리된 글이 많이 있으므로 <a href=\"https://tecoble.techcourse.co.kr/post/2020-05-26-static-factory-method/\">링크</a><br>\n이 포스트에서는 내가  <strong>개인적으로</strong> 언제 이 기법을 사용하는지 서술해 보려고 한다.</p>\n<h3>이름이 있는 것이 나은 경우</h3>\n<p>위의 예시는 없다치고 사용자가 입력한 텍스트로  Car 객체를 생성한다고 가정해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Car</span> car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">Car</span> car2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 두 줄의 코드는 같은 기능을 하지만 이 코드를 읽는 사람에게는 다른 의미로 해석되곤 한다.\n<code class=\"language-text\">new</code> 연산자는 <code class=\"language-text\">이 Car는 input을 멤버 변수로 가지는군</code> 이라면\n<code class=\"language-text\">from</code> 은 <code class=\"language-text\">이 input은 객체 내에서 특정한 로직으로 변환되겠군</code> 이라는 멘탈 모델을 제공한다. </p>\n<p><code class=\"language-text\">이름을 가질 수 있다</code> 는 것이 정적 팩토리 메서드의 가장 큰 장점인 만큼 이름이 있는 것이 나은 경우에 해당 기법을 쓴다.</p>\n<h3>한 가지 방법으로만 객체가 생성되게 하고 싶을 때</h3>\n<p>우리는 다른 프로그래머 혹은 미래의 나 자신이 실수로라도 User 클래스를 적합하지 않은 id로 생성하는 것을 막고 싶다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">User</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isInvalidId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 이 때는 <code class=\"language-text\">private</code> 으로 <code class=\"language-text\">new</code>연산자의 객체 생성을 막고, 정적 팩토리 메서드가 아니면 이 객체를 인스턴스화 할 수 없게 만들수 있다.\n이는 <code class=\"language-text\">싱글톤패턴</code> 의 사용과도 일맥상통한다</p>\n<h3>같은 객체가 여러번 쓰여야할 때</h3>\n<p>같은 객체가 여러번 조회, 캐싱되는 경우에 쓰인다. 한번 만들어 놓고 계속 사용하거나 미리 캐싱된 객체가 없는 경우에<em>만</em>  객체를 생성해 메모리를 아낄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>  \n        cars<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        cars<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        cars<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\t  <span class=\"token comment\">//if cache doesn't contains key, only then instantiate new car</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> cars<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>[정리]<br>\n1.생성자의 파라미터에 들어가는 값이 그대로 객체의 상태가 되지 않는 경우<br>\n2.지정된 경우 이외의 객체 생성을 막고 싶은 경우<br>\n3.여러번 쓰이는 같은 객체에 불필요한 메모리를 할당하고 싶지 않은 경우 </p>\n</blockquote>\n<p>이외에도 여러가지 경우가 있지만 나 같은 경우 위의 세가지의 경우에 정적 팩토리 메서드의 필요성을 느끼고 사용하고 있다.</p>\n<h2>private으로 생성자 막기</h2>\n<p><code class=\"language-text\">Effective Java</code> 는 private으로 생성자를 제한하고 정적 팩토리 메서드만을 두는 것은 단점이자 장점이라 서술한다. private으로 생성자를 막으면 하위 클래스를 만들 수 없기 때문에 <code class=\"language-text\">Composition</code>을 자연스럽게 지향하게 되고, 객체의 불변성에 기여할 수 있기 때문이라고 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CarSet</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cars<span class=\"token punctuation\">;</span>  \n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CarSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>coins <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">CarSet</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">//Complicated Logic..   </span>\n        <span class=\"token comment\">//..  </span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CarSet</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 public 생성자와 정적 팩토리 메서드를 같이 가지는 객체도 장점이 있다고 생각한다\ntext를 검증과 파싱으로 만드는 정적 팩토리 메서드를 따로 두고 이미 만들어진 map으로도 해당 객체가생성되게 하면 이 객체의 <code class=\"language-text\">재사용성</code> 이 늘어날 수 있기 때문이다.</p>","frontmatter":{"title":"정적 팩토리 메서드, 언제 쓸까?","date":"December 24, 2023","update":"December 24, 2023","tags":["java","staticfactorymethod"],"series":"java"},"fields":{"slug":"/staticfactorymethod/","readingTime":{"minutes":5.78}}},"seriesList":{"edges":[{"node":{"id":"3bf07a5c-66d5-5e07-9411-b18a10843f1c","fields":{"slug":"/staticfactorymethod/"},"frontmatter":{"title":"정적 팩토리 메서드, 언제 쓸까?"}}},{"node":{"id":"b9b7d25c-152b-564e-804d-45dc8b79e7aa","fields":{"slug":"/builder_pattern/"},"frontmatter":{"title":"Builder Pattern으로 코드 개선하기"}}},{"node":{"id":"fdf4dd31-0e89-586d-afc5-f7e7df28cbff","fields":{"slug":"/dependency_injection/"},"frontmatter":{"title":"의존성 주입(Dependency Injection)"}}},{"node":{"id":"aec3253b-e519-59a6-8d33-cb0126ae61b6","fields":{"slug":"/garbage_collection/"},"frontmatter":{"title":"GC와 자바의 변화과정"}}}]},"previous":null,"next":{"fields":{"slug":"/gatsby_website/"},"frontmatter":{"title":"Gatsby와 Github Pages로 개인 블로그 만들기"}}},"pageContext":{"id":"3bf07a5c-66d5-5e07-9411-b18a10843f1c","series":"java","previousPostId":null,"nextPostId":"c4a1e307-464b-5e6f-811a-e2c1b5ad3393"}},"staticQueryHashes":[],"slicesMap":{}}