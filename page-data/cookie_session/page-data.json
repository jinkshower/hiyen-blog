{"componentChunkName":"component---src-templates-post-jsx","path":"/cookie_session/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"09ffcdb3-3e65-58e3-9ed6-90519052fedf","excerpt":"HTTP 통신의 특징 쿠키와 세션에 대해 이야기하기 전에 이들이 필요한 배경에 대해 말하려면 Http통신의 특징에 대해 이야기해봐야 한다. \n클라이언트와 서버간 tcp/ip 통신을 계-속 이어나간다면, 그리고 다수의 클라이언트의 통신이 발생하는 상황이라면 서버의 자원은 남아나지 않을 것이다. 이에 따라 응답 이후 바로 접속을 종료하는 HTTP 1.0, 일…","html":"<h2>HTTP 통신의 특징</h2>\n<p>쿠키와 세션에 대해 이야기하기 전에 이들이 필요한 배경에 대해 말하려면 Http통신의 특징에 대해 이야기해봐야 한다.</p>\n<p><code class=\"language-text\">비연결성(Connectionless)</code>\n클라이언트와 서버간 tcp/ip 통신을 계-속 이어나간다면, 그리고 다수의 클라이언트의 통신이 발생하는 상황이라면 서버의 자원은 남아나지 않을 것이다.</p>\n<p>이에 따라 응답 이후 바로 접속을 종료하는 HTTP 1.0, 일정시간 접속을 유지해 3 Way Handshake의 오버헤드 비용을 줄인 HTTP 1.1처럼 HTTP는 기본이 연결을 유지하지 않는 모델로 발전해왔다.</p>\n<p><code class=\"language-text\">무상태(Stateless)</code>\n모든 HTTP 요청, 응답은 독립적이고 이전이나 이후의 요청과 무관하다.  서버는 다수의 요청에서 사용자에 대한 어떠한 정보도 저장할 필요가 없다. </p>\n<p>무상태인 HTTP의 특성에 따라 서버를 확장하기가 쉽다.(어떠한 서버든지 요청에 알맞게 응답할 수 있으므로)</p>\n<p>하지만 이러한 특성에도 불구하고 우리는 웹을 이용할때 독립적인 요청, 응답을 받는 것 같지 않다. </p>\n<p>내 장바구니에는 내가 이전에 담은 물품이 들어있고 로그인한 웹페이지는 계속 해서 내 정보를 보여주고 있기 때문이다.</p>\n<p>이러한 지속적인 연결 경험을 위한 기술이 쿠키와 세션이다.</p>\n<h2>쿠키와 세션</h2>\n<h3>쿠키</h3>\n<p>쿠키란 클라이언트에 저장될 목적으로 생성한 작은 정보를 담은 파일이다.\n클라이언트는 이 정보를 저장해 놓고 요청시에 같이 전달한다. </p>\n<p>예를 들어 로그인시 서버에서 쿠키를 만들어 응답메시지의 헤더에 넣어 보내면 클라이언트는 쿠키 저장소에 이를 저장하고 이후 요청시에 쿠키를 같이 넣어 보내면 로그인한 나의 정보에 맞는 웹페이지를 응답하는 방식이다.</p>\n<p>쿠키는 </p>\n<ol>\n<li>Name 이름 쿠키의 식별자 값</li>\n<li>Value 쿠키의 값</li>\n<li>Domain 쿠키가 저장된 도메인</li>\n<li>Path 쿠키가 사용되는 경로</li>\n<li>Expires 만료기한</li>\n</ol>\n<p>으로 구성된다. </p>\n<p>보통 사용자 로그인 세션관리와 광고 정보 트래킹 등에 사용된다. </p>\n<p>하지만 쿠키는 항상 서버에 전송되다 보니 네트워크 트래픽을 추가로 유발할 수 있고, 갈취되기 쉽기 때문에 보안에 민감한 데이터는 쿠키로 다루면 안된다. </p>\n<h3>세션</h3>\n<p>세션은 클라이언트 측이 아닌 서버에 정보를 일정시간 저장하는 방식이다.</p>\n<p>서버에서 클라이언트 별로 식별값인 세션Id를 부여하고 클라이언트에 대한 정보를 서버에 저장한 후, 생성된 세션Id를 쿠키로 만들어(세션 쿠키) 클라이언트에 응답한다.</p>\n<p>이 후 클라이언트는 요청에 세션Id를 담아 전송하고 이러한 세션은 클라이언트가 브라우저를 닫거나 클라이언트가 로그아웃을 하거나, 설정한 기간을 넘길 시 유효하다. </p>\n<p>세션은 쿠키와 달리 사용자의 민감한 정보를 서버에 저장하기 때문에 보안 면에서 쿠키보다 더 낫다는 장점이 있다.</p>\n<p>하지만 서버에 클라이언트 정보를 저장하는 것은 서버 용량을 차지하기도 하고 서버의 무상태성을 지향하기 힘들게 만든다</p>\n<p>만약 모든 클라이언트의 정보를 하나의 서버가 가지고 있다면 다른 서버를 이용한 확장이 어려울 것이다. </p>\n<p>이를 보완하기 위해 세션 요청을 하나의 서버로 몰아주는 Sticky Session방식이나 세션을 저장소를 따로 생성해 저장하는 방법을 택하곤 한다. </p>\n<p><em>틀린 부분이나 부족한 부분에 대한 피드백은 언제나 환영합니다</em></p>\n<hr>\n<p>참고</p>\n<p><a href=\"https://www.geeksforgeeks.org/difference-between-session-and-cookies/\">https://www.geeksforgeeks.org/difference-between-session-and-cookies/</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies\">https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies</a></p>\n<p>모든 개발자를 위한 HTTP 웹 기본 지식 - 김영한</p>","frontmatter":{"title":"쿠키와 세션","date":"February 10, 2024","update":"February 10, 2024","tags":["http","cookie","session"],"series":"http"},"fields":{"slug":"/cookie_session/","readingTime":{"minutes":5.505}}},"seriesList":{"edges":[{"node":{"id":"210930ca-9014-5a1f-a94a-d8a8ea32b853","fields":{"slug":"/http_cache/"},"frontmatter":{"title":"웹 서비스 캐시"}}},{"node":{"id":"09ffcdb3-3e65-58e3-9ed6-90519052fedf","fields":{"slug":"/cookie_session/"},"frontmatter":{"title":"쿠키와 세션"}}}]},"previous":{"fields":{"slug":"/acceptance_test/"},"frontmatter":{"title":"인수 테스트(Acceptance Test)"}},"next":{"fields":{"slug":"/second_coop/"},"frontmatter":{"title":"두번째 협업 회고"}}},"pageContext":{"id":"09ffcdb3-3e65-58e3-9ed6-90519052fedf","series":"http","previousPostId":"7cff2a81-ce61-50f3-82e6-67796b44edb7","nextPostId":"414c23fc-da5d-5cd9-b420-13c47628870c"}},"staticQueryHashes":[],"slicesMap":{}}