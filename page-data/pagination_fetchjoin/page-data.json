{"componentChunkName":"component---src-templates-post-jsx","path":"/pagination_fetchjoin/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"e4729e9e-f445-5bf8-9d94-22806aeed103","excerpt":"문제를 해결한 코드링크 페이징 처리의 필요성 성능: 대량의 데이터를 한 번에 로드하면 메모리 부족이나 느린 쿼리 실행으로 인해 성능이 저하될 수 있다. 페이징 처리를 사용하면 사용자가 필요로 하는 작은 일부 데이터만 로드하여 성능을 향상시킬 수 있다. 사용자 경험: 사용자가 대량의 데이터를 한 번에 볼 필요는 없으며, 보통은 페이지별로, 특히 최근기록 위…","html":"<p><em>문제를 해결한 <a href=\"https://github.com/jinkshower/Todo-management\">코드</a>링크</em></p>\n<h2>페이징 처리의 필요성</h2>\n<ol>\n<li><strong>성능</strong>: 대량의 데이터를 한 번에 로드하면 메모리 부족이나 느린 쿼리 실행으로 인해 성능이 저하될 수 있다. 페이징 처리를 사용하면 사용자가 필요로 하는 작은 일부 데이터만 로드하여 성능을 향상시킬 수 있다.</li>\n<li><strong>사용자 경험</strong>: 사용자가 대량의 데이터를 한 번에 볼 필요는 없으며, 보통은 페이지별로, 특히 최근기록 위주로 조회한다.</li>\n<li><strong>네트워크 부하 감소</strong>: 대량의 데이터를 한 번에 전송하면 네트워크 부하가 증가할 수 있다. 페이징 처리를 사용하여 각 페이지마다 필요한 데이터만 전송해 네트워크 오버헤드를 감소 시킬 수 있다.</li>\n</ol>\n<h2>Spring Data Jpa에서 페이징 처리하기</h2>\n<p>JpaRepository는 PagingAndSortingRepository를 상속받고 있는데, 이를 사용하면 간편하게 페이징된 데이터를 조회할 수 있다.</p>\n<p>간단한 페이징 예제코드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Service</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Autowired</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> page<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">Pageable</span> pageable <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token function\">by</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createdAt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">descending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> 현재 페이지와 페이지에 들어갈 데이터의 양, 정렬기준을 정해서 PageRequest의 스태틱 메서드를 사용해 Pageable을 구현할 수 있다. 이를 JpaRepository의 파라미터로 넘겨줄 시 <code class=\"language-text\">Page&lt;T></code>로 반환결과를 받을 수 있다</p>\n<p>위 코드 실행시\n<code class=\"language-text\">SELECT * FROM user ORDER BY created_at DESC OFFSET ? LIMIT ?</code>\n라는 쿼리로 offset과 limit을 실행하는 것을 확인할 수 있다. </p>\n<h3><code class=\"language-text\">Slice&lt;T> 와 Page&lt;T>의 차이점</code></h3>\n<p>위 코드는 반환타입으로 Page를 받았지만 <code class=\"language-text\">Slice&lt;T></code>로도 페이징 처리된 객체를 받을 수도 있다.\n<code class=\"language-text\">Page&lt;T></code>와 <code class=\"language-text\">Slice&lt;T></code>의 가장 큰 차이점은 count 쿼리가 날아가냐, 아니냐의 차이이다.</p>\n<p><code class=\"language-text\">Page&lt;T></code>는 전체 페이지의 수를 포함한 페이징된 데이터를 반환한다.\n즉 totalCount를 함께 조회하는 쿼리를 실행하여 결과에 포함시킨다.\n게시판 형태의 페이징에 적합하다.</p>\n<p><code class=\"language-text\">Slice&lt;T></code>는 limit+1을 조회하여 다음 페이지의 존재여부만 확인한다.\n따라서 totalCount를 함께 조회하는 쿼리를 실행하지 않는다.\n더보기, 무한 스크롤 형태의 페이징에 적합하다. </p>\n<h2>QueryDSL에서 페이징 적용하기</h2>\n<p>동적쿼리 작성을 위해 QueryDSL을 사용할 경우 쿼리 메서드 체이닝에 <code class=\"language-text\">.offset()</code> 과 <code class=\"language-text\">.limit()</code> 을 추가하여 페이징 처리를 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// 페이징 정보를 적용하여 쿼리 실행  </span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> todos <span class=\"token operator\">=</span> queryFactory  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token comment\">// 전체 개수를 조회  </span>\n    <span class=\"token keyword\">long</span> totalSize <span class=\"token operator\">=</span> queryFactory  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">fetchFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token comment\">// 페이징 처리된 결과를 Page 객체로 변환하여 반환  </span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">,</span> pageable<span class=\"token punctuation\">,</span> totalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>return 부분은\n<code class=\"language-text\">return PageableExecutionUtils.getPage(todos, pageable, () -> totalSize);</code>로 유틸리티 메서드를 사용해도 된다. (내부에서 PageImpl을 생성하므로 실제 동작은 같다)</p>\n<h2>일대다 관계의 fetch join</h2>\n<p><a href=\"https://jinkshower.github.io/querydsl_nplusone/\">이전글</a> 에서 N+1 문제를 해결하기 위해 queryDSL의 fetchjoin()을 사용한 기록을 남긴 적이 있다.\n자세한 설명없이 코드에 distinct()를 추가했는데 이는 일대다 관계에서 fetch join할 시의 문제점 때문이었다.</p>\n<ul>\n<li>데이터 중복\n일대다 관계에서 fetch join을 사용하면 일의 엔티티와 다의 엔티티들과 조인된다. 이 때 일의 엔티티가 다의 엔티티 수만큼 중복되어 반환된다.</li>\n</ul>\n<p>예를 들어 team(1)와 members(다)의 관계가 있을때 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"팀A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>을 할 경우\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/69d8a341-e79e-49b8-8d04-274902180bad\" alt=\"Pasted image 20240314170134\">\n위의 그림 처럼 일(팀)에 맞는 다의 member를 조회하기 때문에 팀이름이 중복되어 나타난다.</p>\n<p>따라서 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Team</span><span class=\"token punctuation\">></span></span> teams <span class=\"token operator\">=</span> queryFactory \n<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 중복된 결과를 제거</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"팀A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>처럼 distinct()를 사용하여 중복을 제거해 줘야 한다.</p>\n<h2>일대다 fetchJoin과 페이징 처리</h2>\n<p>그렇다면 distinct()를 사용하면 일대다 관계에서 페이징처리를 사용할 수 있을까? </p>\n<p>distinct()는 애플리케이션단에서 중복을 제거하는 것이기 때문에 데이터베이스로 날아가는 쿼리에는 영향을 주지 못한다. </p>\n<p>실제로 일대다 fetch join과 페이징 처리를 같이 사용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByOrderByCreatedAtDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> fetch <span class=\"token operator\">=</span> queryFactory<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>\n\t        <span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>createdAt<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">long</span> totalSize <span class=\"token operator\">=</span> queryFactory  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">fetchFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">PageableExecutionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPage</span><span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">,</span> pageable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> totalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>(테스트 코드)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Test</span>  \n    <span class=\"token keyword\">void</span> <span class=\"token function\">pageTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_TODO_TITLE</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_TODO_CONTENT</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEST_USER</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">likeCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> found <span class=\"token operator\">=</span> todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByOrderByCreatedAtDesc</span><span class=\"token punctuation\">(</span>  \n            <span class=\"token constant\">PAGE_DTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">toPageable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">Pageable</span> pageable <span class=\"token operator\">=</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">getPageable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">Sort</span> sort <span class=\"token operator\">=</span> pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token comment\">// 페이지 정보  </span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sort (Sorted): \"</span> <span class=\"token operator\">+</span> sort<span class=\"token punctuation\">.</span><span class=\"token function\">isSorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sort (Unsorted): \"</span> <span class=\"token operator\">+</span> sort<span class=\"token punctuation\">.</span><span class=\"token function\">isUnsorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sort (Empty): \"</span> <span class=\"token operator\">+</span> sort<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Page Size: \"</span> <span class=\"token operator\">+</span> pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Page Number: \"</span> <span class=\"token operator\">+</span> pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getPageNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Offset: \"</span> <span class=\"token operator\">+</span> pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is Paged: \"</span> <span class=\"token operator\">+</span> pageable<span class=\"token punctuation\">.</span><span class=\"token function\">isPaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is Unpaged: \"</span> <span class=\"token operator\">+</span> pageable<span class=\"token punctuation\">.</span><span class=\"token function\">isUnpaged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token comment\">// 전체 페이지 정보  </span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total Pages: \"</span> <span class=\"token operator\">+</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total Elements: \"</span> <span class=\"token operator\">+</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is Last Page: \"</span> <span class=\"token operator\">+</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">isLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current Page Number: \"</span> <span class=\"token operator\">+</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is First Page: \"</span> <span class=\"token operator\">+</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">isFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is Empty: \"</span> <span class=\"token operator\">+</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size: \"</span> <span class=\"token operator\">+</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number Of Elements: \"</span> <span class=\"token operator\">+</span> found<span class=\"token punctuation\">.</span><span class=\"token function\">getNumberOfElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/ec87d6f5-5b59-46ad-b098-7e8c86037b03\" alt=\"Pasted image 20240314172138\">\n결과는 Pageable에서 명시한대로 페이징처리가 되지만</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/fcafb7e9-b520-42ec-8102-fe1a513f5c64\" alt=\"Pasted image 20240314172411\">\nlimit 이나 offset이 없는 쿼리가 날아감을 볼수 있고\n<code class=\"language-text\">firstResult/maxResults specified with collection fetch; applying in memory</code>라는 경고 메시지가 나오는 것을 확인할 수 있다. </p>\n<p>즉, 일대다에서 다에 해당하는 컬렉션을 모두 메모리에 적재해서 가져오고 그 다음에 페이징처리를 하기 때문에 메모리에 과부하가 갈 수 있다는 뜻이다.</p>\n<h2>해결책1. 페이지네이션 쿼리와 fetch join쿼리를 나눈다</h2>\n<p>fetch join과 페이지네이션을 동시에 사용할 수 없기 때문에 fetch join을 사용하지 않은 쿼리로 페이지네이션을 적용한 todo의 id를 쿼리하고 그 id리스트를 fetchjoin에서 in절에 사용한다면 위와 같은 문제가 일어나지 않을 거라고 생각했다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByOrderByCreatedAtDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">JPAQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> idQuery <span class=\"token operator\">=</span> queryFactory<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token comment\">//id조회</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>createdAt<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> ids <span class=\"token operator\">=</span> idQuery<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">JPAQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> query <span class=\"token operator\">=</span> queryFactory<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>createdAt<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//id로 조회</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> fetch <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">long</span> totalSize <span class=\"token operator\">=</span> queryFactory<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">countDistinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n        <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">PageableExecutionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPage</span><span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">,</span> pageable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> totalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/a14436e5-36f7-4f31-80d7-fe4c0d5ae833\" alt=\"Pasted image 20240314173731\">\nid쿼리에서 페이지네이션이 적용되고</p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/a6361d53-555b-431f-aaf3-909f7ef58aff\" alt=\"Pasted image 20240314173817\">\nid로 fetch join을 수행할때의 where 절</p>\n<p>하지만 해당 방법은 다른 메서드에서도 fetch join을 사용할 경우 id를 조회하는 쿼리를 따로 작성해줘야 하는 불편함이 있다</p>\n<h2>해결책2. BatchSize적용</h2>\n<p>BatchSize는 부모 엔티티를 조회할때 연관된 자식 엔티티의 수를 제한하는 기능이다.\n부모에서 자식엔티티 그래프를 탐색할때 N+1처럼 select가 부모엔티티의 수만큼 나가는게 아니라 이미 조회한 엔티티의 식별자 값을 모아서 where절에 자식 엔티티 조회 쿼리를 하나로 처리한다.\n따라서 쿼리를 하나 추가함으로써 BatchSize에 명시한 만큼의 자식 엔티티를 한번에 조회할 수 있다.</p>\n<p>BatchSize는 일대다 관계의 컬렉션에 어노테이션을 직접 명시하거나</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@BatchSize</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"todo\"</span><span class=\"token punctuation\">,</span> cascade <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSIST</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REMOVE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> comments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>설정 파일에 해당 설정을 추가해서 어플리케이션 전체에서 사이즈를 제한할 수도 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">spring<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>hibernate<span class=\"token punctuation\">.</span>default_batch_fetch_size<span class=\"token operator\">=</span><span class=\"token number\">100</span></code></pre></div>\n<p>(배치 사이즈 적용 후 쿼리)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByOrderByCreatedAtDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> fetch <span class=\"token operator\">=</span> queryFactory<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>createdAt<span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>pageable<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">long</span> totalSize <span class=\"token operator\">=</span> queryFactory  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">fetchFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">PageableExecutionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPage</span><span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">,</span> pageable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> totalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>fetch join을 사용할 필요가 없어졌다. 이미 지연로딩에 대한 대비책으로 batchsize를 두었기 때문이다. </p>\n<p><img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/b62e6d86-0a7d-4ddb-aef4-958582fe47f7\" alt=\"Pasted image 20240314180406\"></p>\n<p>배치 사이즈 추가로 나가는 in 쿼리\n<img src=\"https://github.com/jinkshower/jinkshower.github.io/assets/135244018/d424779d-0804-4cdd-a227-df13995e8c17\" alt=\"Pasted image 20240314175431\"></p>\n<h2>마치며</h2>\n<p>이렇게 Spring Data Jpa에서 페이징 처리와 일대다 관계에서 페이징 처리시 주의점과 해결책을 알아보았다. </p>\n<p><em>틀린 부분이나 부족한 부분에 대한 피드백은 언제나 환영합니다</em></p>\n<hr>\n<p>참고</p>\n<p>자바 ORM 표준 JPA 프로그래밍 - 김영한 저</p>","frontmatter":{"title":"Spring Data JPA의 페이징처리와 fetch join시의 문제점","date":"March 14, 2024","update":"March 14, 2024","tags":["jpa","querydsl","pagination"],"series":"hiyen"},"fields":{"slug":"/pagination_fetchjoin/","readingTime":{"minutes":10.665}}},"seriesList":{"edges":[{"node":{"id":"7e50230d-e72f-5a04-acf7-7fe60fd8536e","fields":{"slug":"/sprintboottest_isolation/"},"frontmatter":{"title":"@SpringBootTest와 테스트격리"}}},{"node":{"id":"e4729e9e-f445-5bf8-9d94-22806aeed103","fields":{"slug":"/pagination_fetchjoin/"},"frontmatter":{"title":"Spring Data JPA의 페이징처리와 fetch join시의 문제점"}}},{"node":{"id":"78a00267-c3db-5594-a5f3-621906fc030d","fields":{"slug":"/ticket_reservation_concurrency/"},"frontmatter":{"title":"'이미 선택된 좌석입니다' 티켓 예매시 중복예매생성 문제"}}},{"node":{"id":"ff98243f-757c-5a9c-a838-c8efb698054e","fields":{"slug":"/domain_refactoring/"},"frontmatter":{"title":"리팩토링을 통해 유연한 도메인을 만들자!"}}},{"node":{"id":"8ff84894-52cd-5648-be4d-4ae81514bfbb","fields":{"slug":"/api_performance_improvment/"},"frontmatter":{"title":"조회 API 성능 개선"}}},{"node":{"id":"ca9fbb61-c38d-5470-9356-76fec2e7afd2","fields":{"slug":"/technology_free_code/"},"frontmatter":{"title":"기술변경에 확장성을 가진 리팩토링"}}},{"node":{"id":"e1cceb09-6833-5331-9222-47f6dfc45dc4","fields":{"slug":"/thread_test_transation/"},"frontmatter":{"title":"스레드테스트와 트랜잭션 전파"}}},{"node":{"id":"68b7f04a-a5cc-509a-a7a5-6fe7a2883037","fields":{"slug":"/java_bytecode/"},"frontmatter":{"title":"바이트코드와 함께 알아 보는 자바 실행과정"}}},{"node":{"id":"91584fd5-bec1-56d5-b867-97896aca40b6","fields":{"slug":"/distributed_information/"},"frontmatter":{"title":"분산시스템에서 데이터를 전달하는 방법"}}},{"node":{"id":"a7cd67d4-5503-5ae9-8281-75d74bd84bbe","fields":{"slug":"/galmanhae_first/"},"frontmatter":{"title":"외부 API 호출과 데이터 처리"}}}]},"previous":{"fields":{"slug":"/querydsl_nplusone/"},"frontmatter":{"title":"Querydsl과 JPA에서의 N+1문제"}},"next":{"fields":{"slug":"/database_index/"},"frontmatter":{"title":"인덱스와 인덱스 적용기"}}},"pageContext":{"id":"e4729e9e-f445-5bf8-9d94-22806aeed103","series":"hiyen","previousPostId":"2b7705f1-0a51-5e3c-9789-fb167354e34a","nextPostId":"113f66c0-5843-57db-9424-03e366fa222e"}},"staticQueryHashes":[],"slicesMap":{}}