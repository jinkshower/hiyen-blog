{"componentChunkName":"component---src-templates-series-jsx","path":"/series/jpa/","result":{"data":{"posts":{"nodes":[{"excerpt":"리팩토링 과제 중 검색기능을 Querydsl로 개선하면서 만난 N+1문제를 해결한 기록 코드링크 검색기능 jpa에 대한 학습이 부족하던 떄, 과제에서 검색기능을 만든 경험이 있다. (서비스 호출메서드 생략) SearchFilter를 전략패턴과 어댑터패턴을 활용하여 필터 기능을 구현한 코드였다.\n그렇게 나쁜 코드는 아니지만 단점이 많은 코드라는 생각이 들었…","fields":{"slug":"/querydsl_nplusone/"},"frontmatter":{"date":"March 10, 2024","update":"Mar 10, 2024","title":"Querydsl과 JPA에서의 N+1문제","tags":["jpa","querydsl"]}},{"excerpt":"문제를 해결한 코드링크 페이징 처리의 필요성 성능: 대량의 데이터를 한 번에 로드하면 메모리 부족이나 느린 쿼리 실행으로 인해 성능이 저하될 수 있다. 페이징 처리를 사용하면 사용자가 필요로 하는 작은 일부 데이터만 로드하여 성능을 향상시킬 수 있다. 사용자 경험: 사용자가 대량의 데이터를 한 번에 볼 필요는 없으며, 보통은 페이지별로, 특히 최근기록 위…","fields":{"slug":"/pagination_fetchjoin/"},"frontmatter":{"date":"March 14, 2024","update":"Mar 14, 2024","title":"Spring Data JPA의 페이징처리와 fetch join시의 문제점","tags":["jpa","querydsl","pagination"]}}]}},"pageContext":{"series":"jpa"}},"staticQueryHashes":[],"slicesMap":{}}