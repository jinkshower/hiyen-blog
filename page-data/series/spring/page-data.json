{"componentChunkName":"component---src-templates-series-jsx","path":"/series/spring/","result":{"data":{"posts":{"nodes":[{"excerpt":"의존성 주입(DI)포스팅에서 이어지는 내용입니다. Inversion of Control (제어의 역전) 이란? 객체의 컨트롤이나 프로그램의 일정부분을 프레임워크의 컨테이너으로 옮기는 소프트웨어 설계의 원리를 뜻한다. \n이 원리는 여러가지 디자인 패턴(전략 패턴, 서비스 로케이터 패턴, 팩토리 패턴)으로 실현될 수 있고 특히 의존성 주입(DI)로 가장 두드…","fields":{"slug":"/ioc_container/"},"frontmatter":{"date":"January 20, 2024","update":"Jan 20, 2024","title":"IoC와 스프링 컨테이너","tags":["spring","ioc","container"]}},{"excerpt":"개인과제를 진행하며 Spring의 AOP 예외 처리로 코드를 개선한 기록. 과제에서 마주한 문제 개인 과제를 진행하는 도중 Entity를 수정할때 비밀번호가 다를 경우 예외를 던지는 코드를 작성하게 되었다. 이 애플리케이션이 Java로 돌아가는 커맨드라인 프로그램이었다면 종료되었을 것이다. 하지만 Spring에서 별다른 예외처리를 하지 않고 그냥 thro…","fields":{"slug":"/spring_exception/"},"frontmatter":{"date":"January 24, 2024","update":"Jan 24, 2024","title":"AOP를 통한 Spring 예외처리","tags":["spring","exception","exceptionhandler"]}}]}},"pageContext":{"series":"spring"}},"staticQueryHashes":[],"slicesMap":{}}