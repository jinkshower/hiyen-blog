{"componentChunkName":"component---src-templates-series-jsx","path":"/series/tickitecking/","result":{"data":{"posts":{"nodes":[{"excerpt":"이전 글에서 Github Actions로 CI환경을 만들고 적용한 글을 작성했던 적이 있습니다.  이 후 현재 참여하는 프로젝트에서 배포 자동화의 필요성을 느끼고 학습, 적용한 기록을 적어봅니다. 배포 자동화의 필요성 이전에 참여한 프로젝트에서 AWS의 EC2 인스턴스로 배포를 할 때 신기하면서도 힘들었던 기억이 있습니다.  코드의 수정이 있어 머지가 될…","fields":{"slug":"/docker_githubactions/"},"frontmatter":{"date":"April 06, 2024","update":"Apr 06, 2024","title":"Github Actions, Docker와 함께하는 배포 자동화","tags":["docker","continuous_depolyment","github_actions"]}},{"excerpt":"학습 계기 콘서트 티켓 예매 프로젝트를 진행하는 중 동시에 많은 사용자가 한 자리의 좌석을 예매할 시 여러개의 같은 예약이 생성되는 문제를 발견했습니다. 콘서트 예매 상황을 생각해보면 굉장히 흔한 일인데요, '이미 선택된 좌석입니다'라는 메시지를 한번쯤은 보신 기억이 있을 거라 생각됩니다. 해당 문제를 해결하기 위해 jpa의 낙관적 락, 비관적락을 적용해…","fields":{"slug":"/ticket_reservation_concurrency/"},"frontmatter":{"date":"April 11, 2024","update":"Apr 11, 2024","title":"'이미 선택된 좌석입니다' 티켓 예매시 중복예매생성 문제","tags":["concurrency","lock","redis"]}},{"excerpt":"프로젝트를 진행하며 쿼리문을 짜고 있는데 너무나 많은 join을 사용하고 있다고 느껴졌습니다.  물론 테이블 개수가 많으면 여러개의 join문을 사용하는 것은 빈번하지만 해당 프로젝트는 테이블의 개수가 그렇게 많지 않은데도(6개) 3~4중 조인문을 작성하며 구현이 진행되니 도메인 설계와 비즈니스 로직에 대한 재점검이 필요하다고 느껴졌습니다. 회의를 통해 …","fields":{"slug":"/domain_refactoring/"},"frontmatter":{"date":"April 16, 2024","update":"Apr 16, 2024","title":"리팩토링을 통해 유연한 도메인을 만들자!","tags":["java","refactoring"]}},{"excerpt":"학습 계기 저번글에서 프로젝트의 예매 로직에서의 동시성 제어를 Redis로 해결하기로 결정했습니다. redis가 프로젝트의 핵심기능에서 중요한 역할을 하는 만큼 좀 더 자세히 학습할 필요가 있다고 생각했습니다. 또한 프로젝트에서 Redis의 관리가 중요한 대목으로 떠올랐는데요! 이번 글에서는 Redis를 자세히 알아보고 저희 프로젝트에서 어떻게 Redis…","fields":{"slug":"/redis_deeper/"},"frontmatter":{"date":"April 22, 2024","update":"Apr 22, 2024","title":"Redis, 좀 더 자세히 알아볼까?","tags":["redis"]}},{"excerpt":"학습계기 프로젝트를 진행하며 api마다 부하테스트로 성능을 측정하고 있었습니다. 이 중 가장 조회가 많을 것이라 예상되는 좌석 조회 api가 너무나 성능이 떨어지는 충격적인 결과를 보게 되었는데요.. (2분동안 100명이 10초 간격으로 조회요청시)\nPasted image 20240417170414\n오류율 25%, tps 2.9, 평균 응답시간 3만대의 …","fields":{"slug":"/api_performance_improvment/"},"frontmatter":{"date":"April 27, 2024","update":"Apr 27, 2024","title":"조회 API 성능 개선","tags":["performanceimprovement","index","caching","querytuning"]}},{"excerpt":"학습 계기 부하테스트를 진행하던 중 읽기와 쓰기 요청이 동시에 수행될 때 읽기 속도가 현저히 줄어드는 현상 발견하게 되었습니다.  쿼리 최적화를 수행하고 인덱스를 조정해보았지만 결국 DB에서의 병목 현상을 해결할 필요가 있음을 인지하게 되었습니다.  이에 따라 데이터베이스 레플리케이션을 학습하고 적용한 기록을 공유하고자 합니다. 데이터베이스 레플리케이션 …","fields":{"slug":"/db_replication/"},"frontmatter":{"date":"May 03, 2024","update":"May 03, 2024","title":"알아보고 적용하는 DB Replication","tags":["MySQL","replication"]}},{"excerpt":"학습 계기 팀원분이 ci과정에서 계속 빌드가 실패한다고 해당 오류에 대한 이슈를 제기해주셨습니다. 로그를 살펴보았는데요, 테스트에서 Redis가 없어서 일어난 오류임을 인지하고 CI 과정에서 Redis설치하는 flow를 추가해서 문제를 해결했습니다. 간단한 오류였고 간단한 해결이었지만 찝찝했는데요, Redis가 아닌 다른 기술을 사용하게 된다면? 그 땐 …","fields":{"slug":"/technology_free_code/"},"frontmatter":{"date":"May 07, 2024","update":"May 07, 2024","title":"기술변경에 확장성을 가진 리팩토링","tags":["refactoring","interface","test"]}},{"excerpt":"학습계기 모니터링 시스템을 구축하게 되었습니다. 이 중 Spring Boot 프로젝트와 쉽게 연동할 수 있고, 레퍼런스가 많고 무엇보다 인 Actuator-Prometheus-Grafana를 선택하게 되었습니다. 모니터링 과정 Pasted image 20240425111334\n(출처: https://wildeveloperetrain.tistory.com/…","fields":{"slug":"/monitoring/"},"frontmatter":{"date":"May 13, 2024","update":"May 13, 2024","title":"Actuator, Prometheus, Grafana로 모니터링 환경을 구축해보자","tags":["actuator","prometheus","grafana"]}}]}},"pageContext":{"series":"tickitecking"}},"staticQueryHashes":[],"slicesMap":{}}