{"componentChunkName":"component---src-templates-series-jsx","path":"/series/todo/","result":{"data":{"posts":{"nodes":[{"excerpt":"완성된 코드는 링크에서 볼 수 있습니다. (글의 코드와 조금 다른 면이 있을 수 있습니다) @SpringBootTest와 @Transactional @Transactional을 어노테이션 자체에서 포함하고 있는 @DataJpaTest와 달리 @SpringBootTest는 @Transactional을 가지고 있지 않다. 따라서 트랜잭션-롤백 환경을 @Spr…","fields":{"slug":"/sprintboottest_isolation/"},"frontmatter":{"date":"March 04, 2024","update":"Mar 10, 2024","title":"@SpringBootTest와 테스트격리","tags":["spring","testing","testisolation"]}},{"excerpt":"리팩토링 과제 중 검색기능을 Querydsl로 개선하면서 만난 N+1문제를 해결한 기록 코드링크 검색기능 jpa에 대한 학습이 부족하던 떄, 과제에서 검색기능을 만든 경험이 있다. (서비스 호출메서드 생략) SearchFilter를 전략패턴과 어댑터패턴을 활용하여 필터 기능을 구현한 코드였다.\n그렇게 나쁜 코드는 아니지만 단점이 많은 코드라는 생각이 들었…","fields":{"slug":"/querydsl_nplusone/"},"frontmatter":{"date":"March 10, 2024","update":"Mar 10, 2024","title":"Querydsl과 JPA에서의 N+1문제","tags":["jpa","querydsl"]}},{"excerpt":"문제를 해결한 코드링크 페이징 처리의 필요성 성능: 대량의 데이터를 한 번에 로드하면 메모리 부족이나 느린 쿼리 실행으로 인해 성능이 저하될 수 있다. 페이징 처리를 사용하면 사용자가 필요로 하는 작은 일부 데이터만 로드하여 성능을 향상시킬 수 있다. 사용자 경험: 사용자가 대량의 데이터를 한 번에 볼 필요는 없으며, 보통은 페이지별로, 특히 최근기록 위…","fields":{"slug":"/pagination_fetchjoin/"},"frontmatter":{"date":"March 14, 2024","update":"Mar 14, 2024","title":"Spring Data JPA의 페이징처리와 fetch join시의 문제점","tags":["jpa","querydsl","pagination"]}},{"excerpt":"학습계기 팀 프로젝트 중 테스트를 해보며 쿼리를 살펴보고 있는데 이상하게 delete 쿼리가 많이 나가는 현상을 발견했습니다. Pasted image 20240321160655 문제가 되는 repository의 코드입니다. 카드에 할당자가 여러명 존재할 수 있기 때문에 카드를 삭제할때 해당 카드에 할당된 사용자를 모두 삭제해줘야 했는데,  처음 생각은 d…","fields":{"slug":"/jpa_deleteAll/"},"frontmatter":{"date":"March 31, 2024","update":"Mar 31, 2024","title":"JPA deleteAll()을 사용할 시 문제점","tags":["jpa"]}}]}},"pageContext":{"series":"todo"}},"staticQueryHashes":[],"slicesMap":{}}