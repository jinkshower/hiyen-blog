{"componentChunkName":"component---src-templates-post-jsx","path":"/domain_refactoring/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"ff98243f-757c-5a9c-a838-c8efb698054e","excerpt":"프로젝트를 진행하며 쿼리문을 짜고 있는데 너무나 많은 join을 사용하고 있다고 느껴졌습니다.  물론 테이블 개수가 많으면 여러개의 join문을 사용하는 것은 빈번하지만 해당 프로젝트는 테이블의 개수가 그렇게 많지 않은데도(6개) 3~4중 조인문을 작성하며 구현이 진행되니 도메인 설계와 비즈니스 로직에 대한 재점검이 필요하다고 느껴졌습니다. 회의를 통해 …","html":"<p>프로젝트를 진행하며 쿼리문을 짜고 있는데 너무나 많은 join을 사용하고 있다고 느껴졌습니다. </p>\n<p>물론 테이블 개수가 많으면 여러개의 join문을 사용하는 것은 빈번하지만 해당 프로젝트는 테이블의 개수가 그렇게 많지 않은데도(6개) 3~4중 조인문을 작성하며 구현이 진행되니 도메인 설계와 비즈니스 로직에 대한 재점검이 필요하다고 느껴졌습니다.</p>\n<p>회의를 통해 도메인 설계와 비즈니스 로직을 수정했고 이에 따라 리팩토링을 진행한 기록을 남기고자 합니다.</p>\n<h2>리팩토링 전 설계 살펴보기</h2>\n<p>[사진]\n초기의 비즈니스 로직 설계는 이러했습니다.</p>\n<ol>\n<li>공연장 생성시 3개로 고정된 등급을 가진 좌석들을 생성한다</li>\n<li>콘서트 생성시 3개의 등급에 맞는 가격을 결정한다.</li>\n<li>예매시 좌석이 예약되었는지 확인한다.</li>\n<li>예약되지 않았다면 예매를 생성한다.</li>\n</ol>\n<p>공연장이 좌석을 제공하고 콘서트는 해당 공연장의 좌석을 이용하는 것이 좀 더 현실적이라고 생각해서 내렸던 결정이었습니다.</p>\n<p>이에 따라 좌석은 공연장의 id를 가지고 좌석의 가격은 콘서트의 id를 가지게 되었습니다.</p>\n<p>예매는 예매한 사용자의 id, 콘서트의 id, 좌석의 id를 가지게 하면 1번 좌석의 1번 콘서트에 1번 유저가 예매한 정보를 저장할 수 있으니 예매정보를 콘서트의 좌석마다 가지는 것도 문제없을거라는 생각이었죠. </p>\n<h2>다중 조인을 작성하며</h2>\n<p>해당 설계의 문제점은 코드를 구현하면서 드러났습니다.</p>\n<p>콘서트의 예약된 좌석의 행열 정보를 찾는 쿼리문입니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n        s1_0<span class=\"token punctuation\">.</span>horizontal<span class=\"token punctuation\">,</span>\n        s1_0<span class=\"token punctuation\">.</span>vertical \n    <span class=\"token keyword\">from</span>\n        concerts c1_0 \n    <span class=\"token keyword\">join</span>\n        seats s1_0 \n            <span class=\"token keyword\">on</span> c1_0<span class=\"token punctuation\">.</span>auditorium_id<span class=\"token operator\">=</span>s1_0<span class=\"token punctuation\">.</span>auditorium_id \n    <span class=\"token keyword\">join</span>\n        reservations r1_0 \n            <span class=\"token keyword\">on</span> r1_0<span class=\"token punctuation\">.</span>seat_id<span class=\"token operator\">=</span>s1_0<span class=\"token punctuation\">.</span>id \n    <span class=\"token keyword\">where</span>\n        <span class=\"token punctuation\">(</span>\n            c1_0<span class=\"token punctuation\">.</span>deleted_at <span class=\"token operator\">is</span> <span class=\"token boolean\">NULL</span>\n        <span class=\"token punctuation\">)</span> \n        <span class=\"token operator\">and</span> c1_0<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>? \n        <span class=\"token operator\">and</span> r1_0<span class=\"token punctuation\">.</span>concert_id<span class=\"token operator\">=</span>? \n        <span class=\"token operator\">and</span> r1_0<span class=\"token punctuation\">.</span>seat_id<span class=\"token operator\">=</span>s1_0<span class=\"token punctuation\">.</span>id \n        <span class=\"token operator\">and</span> r1_0<span class=\"token punctuation\">.</span><span class=\"token keyword\">status</span><span class=\"token operator\">=</span>?</code></pre></div>\n<ol>\n<li>콘서트 id로 콘서트를 찾습니다</li>\n<li>찾은 콘서트에서 공연장 id로 좌석테이블과 join 합니다</li>\n<li>찾은 좌석에서 좌석 id로 예매테이블과 join합니다</li>\n<li>찾은 예매에서 콘서트 id, status가 \"Y\"인 좌석을 찾습니다.</li>\n</ol>\n<p>예약된 좌석의 행열번호를 찾는다는 간단한 로직인데 쿼리문과 그 쿼리문을 수행하기 위한 로직은 그렇게 간단하지 않았습니다.</p>\n<p>사실 쿼리문만 작성하면 기능이 문제없이 작동되긴 하지만 해당 코드를 누군가 고칠 수 있을까?라는 생각에는 물음표가 띄워졌습니다. </p>\n<h2>진짜 문제점 파악하기</h2>\n<p>작성한 코드(QueryDsl)를 보며 도메인 설계에 대한 리팩토링이 필요하다는 생각이 들었습니다. </p>\n<p>저희 설계의 문제는 무엇이었을까요?</p>\n<p>[사진]</p>\n<p>바로 <code class=\"language-text\">좌석이 예약에 대한 정보를 가지지 않기 때문</code>입니다.\n좌석이 예약에 대한 정보를 가지고 있다면 좌석 테이블에 where하나로 해결할 수 있는 문제였습니다.</p>\n<p>좌석이 예약에 대한 정보를 가지지 못한 이유는 무엇이었을까요?</p>\n<p><code class=\"language-text\">좌석과 콘서트의 생성주기가 달랐기 때문입니다.</code></p>\n<p>이는 좌석의 등급별 가격에 대한 고민에서 비롯되었는데요, 가격의 등급을 3개로 제한하고 공연장이 생성될 때 고정된 등급을 좌석에 부여한데에서 문제가 생겼습니다.</p>\n<p>공연장이 좌석의 등급을 결정해서 생성하기 때문에 좌석 테이블은 콘서트나 예약에 관한 정보를 가지는게 불가능했습니다. </p>\n<p>[사진]</p>\n<p>그러다 보니 좌석의 예약 상태를 확인하기 위해서 콘서트-공연장-좌석-예매의 4개 테이블이 모두 쓰일 수 밖에 없었던 것이죠</p>\n<h2>설계 리팩토링</h2>\n<p>문제점을 알았으니 도메인 설계를 리팩토링하기로 결정했습니다.</p>\n<p><code class=\"language-text\">공연장이 생성될 때 좌석이 생성된다는 현실에서는 자연스럽던 사실이 코드상에서는 오히려 부자연스럽고 복잡한 구현을 낳았습니다.</code></p>\n<p>그래서 공연장이 좌석을 생성하는 게 아닌, 콘서트가 생성될때 콘서트가 좌석을 생성하게 바꾸기로 결정하였습니다.</p>\n<p>이에 따라 공연장 도메인에서 좌석에 대한 의존성을 모두 제거하였습니다.</p>\n<p>![[Pasted image 20240404152113.png]]\n(깔끔해진 공연장 임포트문)</p>\n<p>이제 좌석은 concertId와 예약여부인 reserved 필드를 가질 수 있게 되었습니다.</p>\n<p>[사진]</p>\n<p>이에 따라 바뀐 erd입니다.</p>\n<p>[사진]</p>\n<h2>설계가 바뀐 후</h2>\n<p>설계가 바뀐 후의 예약된 좌석 정보를 조회하는 쿼리문이 어떻게 바뀌었을까요 ?</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">\t<span class=\"token keyword\">select</span>\n        s1_0<span class=\"token punctuation\">.</span>horizontal<span class=\"token punctuation\">,</span>\n        s1_0<span class=\"token punctuation\">.</span>vertical \n\t<span class=\"token keyword\">from</span>\n        seats s1_0 \n    <span class=\"token keyword\">where</span>\n        s1_0<span class=\"token punctuation\">.</span>concert_id<span class=\"token operator\">=</span>? \n        <span class=\"token operator\">and</span> s1_0<span class=\"token punctuation\">.</span>reserved<span class=\"token operator\">=</span>?</code></pre></div>\n<p>4개의 테이블을 거쳐서 찾아야 했던 좌석정보가 단 하나의 테이블을 조회하는 쿼리문으로 바뀌었습니다.</p>\n<p>전과 비교했을 때 당연히 해당 쿼리를 보기도 쉽고, 고치기도 편하게 되었네요!</p>\n<h3>바뀐 설계가 열어준 유연한 가격정책</h3>\n<p>설계가 바뀌니 고정되어 있던 가격정책에도 눈이 갔습니다.</p>\n<p>가격이 3개로 고정되어 있었고 콘서트는 3개의 등급에 대한 가격을 결정하다보니 정해진 등급에 가격을 맞춰끼우는 코드를 작성해야 했었는데요.</p>\n<p>(G는 골드, S는 실버, B는 브론즈 등급입니다)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createSeatPrices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> concertId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SeatPriceDto</span> seatPriceDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeatPrice</span><span class=\"token punctuation\">></span></span> seatPrices <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> seatPricesMap <span class=\"token operator\">=</span> <span class=\"token function\">parseSeatPrices</span><span class=\"token punctuation\">(</span>seatPriceDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    seatPricesMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">SeatPrice</span> seatPrice <span class=\"token operator\">=</span> <span class=\"token class-name\">SeatPrice</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">concertId</span><span class=\"token punctuation\">(</span>concertId<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        seatPrices<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>seatPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    seatPriceRepository<span class=\"token punctuation\">.</span><span class=\"token function\">saveAll</span><span class=\"token punctuation\">(</span>seatPrices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">parseSeatPrices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SeatPriceDto</span> seatPriceDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>  \n        <span class=\"token string\">\"G\"</span><span class=\"token punctuation\">,</span> seatPriceDto<span class=\"token punctuation\">.</span><span class=\"token function\">getGoldPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token string\">\"S\"</span><span class=\"token punctuation\">,</span> seatPriceDto<span class=\"token punctuation\">.</span><span class=\"token function\">getSilverPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> seatPriceDto<span class=\"token punctuation\">.</span><span class=\"token function\">getBronzePrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드는 슬쩍봐도 확장성이 꼭꼭 닫혀진 좋지 않은 코드였습니다.</p>\n<p>만약 가격정책에서 다이아몬드 등급이 추가된다면? Map을 사용하는 모든 코드에 \"D\"라는 키를 추가해야겠네요. 만약 Grand라는 등급이 추가되면 모든 키의 String값을 수정해야 겠네요.[우는 이모지]</p>\n<p>바뀐 설계에서는 콘서트가 좌석을 생성하기 때문에 가격정책도 유연하게 바뀔 수 있었습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createSeatPrices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> concertId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeatPriceRequestDto</span><span class=\"token punctuation\">></span></span> seatPriceRequestDtos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeatPrice</span><span class=\"token punctuation\">></span></span> seatPrices <span class=\"token operator\">=</span> <span class=\"token function\">seatPricesToEntity</span><span class=\"token punctuation\">(</span>concertId <span class=\"token punctuation\">,</span>seatPriceRequestDtos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    seatPriceRepository<span class=\"token punctuation\">.</span><span class=\"token function\">saveAll</span><span class=\"token punctuation\">(</span>seatPrices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeatPrice</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">seatPricesToEntity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> concertId<span class=\"token punctuation\">,</span>  \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeatPriceRequestDto</span><span class=\"token punctuation\">></span></span> seatPriceRequestDtos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeatPrice</span><span class=\"token punctuation\">></span></span> seatPrices <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SeatPriceRequestDto</span> requestDto <span class=\"token operator\">:</span> seatPriceRequestDtos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">SeatPrice</span> seatPrice <span class=\"token operator\">=</span> <span class=\"token class-name\">SeatPrice</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span>requestDto<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">concertId</span><span class=\"token punctuation\">(</span>concertId<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        seatPrices<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>seatPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">return</span> seatPrices<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>콘서트를 생성할때 콘서트가 원하는 좌석의 가격과 등급을 결정할 수 있게 되었고 우리는 그 정보를 매칭하여 entity로 생성, 저장만 해주면 되는 코드로 개선되었습니다.</p>\n<h2>마치며</h2>\n<p>해당 리팩토링 경험을 통해 도메인 설계의 중요성, 현실과 객체는 언제나 1대1로 매칭되는 정석적인 관계가 아니라는 사실을 다시 한번 깨닫게 되었습니다. </p>","frontmatter":{"title":"리팩토링을 통해 유연한 도메인을 만들자!","date":"April 11, 2024","update":"April 11, 2024","tags":["java","refactoring"],"series":"java"},"fields":{"slug":"/domain_refactoring/","readingTime":{"minutes":9.57}}},"seriesList":{"edges":[{"node":{"id":"3bf07a5c-66d5-5e07-9411-b18a10843f1c","fields":{"slug":"/staticfactorymethod/"},"frontmatter":{"title":"정적 팩토리 메서드, 언제 쓸까?"}}},{"node":{"id":"b9b7d25c-152b-564e-804d-45dc8b79e7aa","fields":{"slug":"/builder_pattern/"},"frontmatter":{"title":"Builder Pattern으로 코드 개선하기"}}},{"node":{"id":"fdf4dd31-0e89-586d-afc5-f7e7df28cbff","fields":{"slug":"/dependency_injection/"},"frontmatter":{"title":"의존성 주입(Dependency Injection)"}}},{"node":{"id":"ff98243f-757c-5a9c-a838-c8efb698054e","fields":{"slug":"/domain_refactoring/"},"frontmatter":{"title":"리팩토링을 통해 유연한 도메인을 만들자!"}}}]},"previous":{"fields":{"slug":"/ticket_reservation_concurrency/"},"frontmatter":{"title":"'이미 선택된 좌석입니다' 티켓 예매시 중복예매생성 문제"}},"next":{"fields":{"slug":"/redis_deeper/"},"frontmatter":{"title":"Redis, 좀 더 자세히 알아볼까?"}}},"pageContext":{"id":"ff98243f-757c-5a9c-a838-c8efb698054e","series":"java","previousPostId":"78a00267-c3db-5594-a5f3-621906fc030d","nextPostId":"10982119-8b41-58d8-b2a9-83f45f276930"}},"staticQueryHashes":[],"slicesMap":{}}