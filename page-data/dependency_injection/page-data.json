{"componentChunkName":"component---src-templates-post-jsx","path":"/dependency_injection/","result":{"data":{"site":{"siteMetadata":{"title":"Hiyen"}},"markdownRemark":{"id":"fdf4dd31-0e89-586d-afc5-f7e7df28cbff","excerpt":"의존성이란 객체 지향 언어에서 A 객체가 B객체를 이용할때 A는 B를  고 표현한다.  A가 생성될 때 B가 필요할 수도 있고, A의 메서드의 파라미터로 B가 있을 수도 있다.  House객체가 Tv객체를 이용하는 예시를 들어보자 더이상 House객체가 변하지 않으면 위 코드는 문제가 없다.  하지만 House가 새로운 를 가져야 한다면? House를 테…","html":"<h2>의존성이란</h2>\n<p>객체 지향 언어에서 A 객체가 B객체를 이용할때 A는 B를 <code class=\"language-text\">의존한다</code> 고 표현한다.  A가 생성될 때 B가 필요할 수도 있고, A의 메서드의 파라미터로 B가 있을 수도 있다. </p>\n<p>House객체가 Tv객체를 이용하는 예시를 들어보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">House</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Tv</span> tv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// House는 Tv에 의존한다</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>더이상 House객체가 변하지 않으면 위 코드는 문제가 없다. </p>\n<p>하지만 House가 새로운 <code class=\"language-text\">SmartTv</code>를 가져야 한다면? House를 테스트할 때 다른 Tv 종류를 넣어보고 싶다면?</p>\n<p>Tv를 인터페이스화 해서 다른 Tv를 넣을 수는 있지만 임시방편일 뿐이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">House</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//Tv tv = new Tv(); </span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Tv</span> tv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmartTv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//tv에 다른 구현체를 넣었지만..</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Tv</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">turnOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartTv</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Tv</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// some logic</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 객체가 다른 객체에 강한 의존성을 지니면 코드를 재사용하거나 확장하는데에 문제점이 생긴다.</p>\n<h2>의존성을 주입하자</h2>\n<p>House가 여러 Tv를 사용하는 것에 제약이 생긴 이유는 House가 어떠한 종류의 Tv를 자신의 상태로 가질지 미리 알고 있었기 때문이다 .</p>\n<p>Dependency Injection은 객체 간의 의존관계를 느슨하게 설정해놓고 Compile Time이 아닌 Runtime에 객체가 의존하고 있는 객체를 생성 후 넣어주는 방식을 의미한다.</p>\n<ul>\n<li>생성자를 이용하는 방식</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">House</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Tv</span> tv<span class=\"token punctuation\">;</span> <span class=\"token comment\">//House는 어떤 Tv를 가질지 모른다</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tv</span> tv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tv <span class=\"token operator\">=</span> tv<span class=\"token punctuation\">;</span> <span class=\"token comment\">//외부에서 이미 생성된 tv를 주입받는다</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">House</span> house <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//주입</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>setter를 이용하는 방식</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">House</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Tv</span> tv<span class=\"token punctuation\">;</span> <span class=\"token comment\">//House는 어떤 Tv를 가질지 모른다</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tv</span> tv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tv <span class=\"token operator\">=</span> tv<span class=\"token punctuation\">;</span> <span class=\"token comment\">//외부에서 이미 생성된 tv를 주입받는다</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">House</span> house <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\thouse<span class=\"token punctuation\">.</span><span class=\"token function\">setTv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//주입</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>의존성 주입의 장점</h2>\n<ol>\n<li>A가 B의 변경을 알 필요가 없어진다</li>\n</ol>\n<p>Tv를 생성할때 리모컨, 버튼, 안테나 등 다양한 요소가 필요하다고 해보자. 의존성이 강할 때 Tv가 변경되면 House도 같이 변경되어야 했다.\n하지만 의존성을 주입하면 Tv가 어떻게 변경되어도 House객체 내의 코드는 수정할 필요가 없어진다. </p>\n<ol start=\"2\">\n<li>A를 테스트하기 쉬워진다</li>\n</ol>\n<p>A와 B의 의존관계가 느슨해졌기 때문에 A와 B를 독립적으로 테스트 하는 것이 쉬워졌고\nA에 interface화한 Tv의 여러 구현체를 주입시키는 테스트도 가능해진다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">House</span> house1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">House</span> house2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SmartTv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>A의 public API가 명시적이게 된다</li>\n</ol>\n<p>의존성을 주입하기 전 House의 API를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>House의 코드를 열어보지 않는 한 House가 Tv를 가지고 있는지 알 길이 없다. </p>\n<p>의존성을 주입한다면 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">House</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tv</span> tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>가 될 것이고 House를 사용하고자 하는 다른 개발자들은 누구나 House가 Tv를 의존하는 객체임을 알 수 있다.</p>","frontmatter":{"title":"의존성 주입(Dependency Injection)","date":"January 11, 2024","update":"January 11, 2024","tags":["dependency_injection","java"],"series":"java"},"fields":{"slug":"/dependency_injection/","readingTime":{"minutes":4.41}}},"seriesList":{"edges":[{"node":{"id":"3bf07a5c-66d5-5e07-9411-b18a10843f1c","fields":{"slug":"/staticfactorymethod/"},"frontmatter":{"title":"정적 팩토리 메서드, 언제 쓸까?"}}},{"node":{"id":"b9b7d25c-152b-564e-804d-45dc8b79e7aa","fields":{"slug":"/builder_pattern/"},"frontmatter":{"title":"Builder Pattern으로 코드 개선하기"}}},{"node":{"id":"fdf4dd31-0e89-586d-afc5-f7e7df28cbff","fields":{"slug":"/dependency_injection/"},"frontmatter":{"title":"의존성 주입(Dependency Injection)"}}},{"node":{"id":"68b7f04a-a5cc-509a-a7a5-6fe7a2883037","fields":{"slug":"/java_bytecode/"},"frontmatter":{"title":"바이트코드와 함께 알아 보는 자바 실행과정"}}},{"node":{"id":"aec3253b-e519-59a6-8d33-cb0126ae61b6","fields":{"slug":"/garbage_collection/"},"frontmatter":{"title":"GC와 자바의 변화과정"}}}]},"previous":{"fields":{"slug":"/builder_pattern/"},"frontmatter":{"title":"Builder Pattern으로 코드 개선하기"}},"next":{"fields":{"slug":"/union_find/"},"frontmatter":{"title":"Union Find"}}},"pageContext":{"id":"fdf4dd31-0e89-586d-afc5-f7e7df28cbff","series":"java","previousPostId":"b9b7d25c-152b-564e-804d-45dc8b79e7aa","nextPostId":"08134225-7821-543b-a3ae-386f3b7b4215"}},"staticQueryHashes":[],"slicesMap":{}}